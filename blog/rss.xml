<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>도각도각 메모장 Blog</title>
        <link>https://yuseon-lim.github.io/blog</link>
        <description>도각도각 메모장 Blog</description>
        <lastBuildDate>Sat, 25 May 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[SpringCamp 2024 후기 🌱]]></title>
            <link>https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024</link>
            <guid>https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024</guid>
            <pubDate>Sat, 25 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[스프링캠프에 다녀왔다 🌱]]></description>
            <content:encoded><![CDATA[<p><a href="https://springcamp.ksug.org/2024/" target="_blank" rel="noopener noreferrer">2024 스프링캠프</a>에 다녀왔다!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="치열했던-티켓팅">치열했던 티켓팅<a href="https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024#%EC%B9%98%EC%97%B4%ED%96%88%EB%8D%98-%ED%8B%B0%EC%BC%93%ED%8C%85" class="hash-link" aria-label="Direct link to 치열했던 티켓팅" title="Direct link to 치열했던 티켓팅">​</a></h2>
<div style="width:60%"><p><img decoding="async" loading="lazy" alt="결제창" src="https://yuseon-lim.github.io/assets/images/IMG_5213-8f75da94da18ddb7a4f2b7a159f4a476.jpg" width="1170" height="1406" class="img_ev3q"></p></div>
<p>핸드폰으로 시도했는데 다행히 성공했다. 1분도 안되어 매진되었다고 한다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="현장-사진-및-굿즈-수령">현장 사진 및 굿즈 수령<a href="https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024#%ED%98%84%EC%9E%A5-%EC%82%AC%EC%A7%84-%EB%B0%8F-%EA%B5%BF%EC%A6%88-%EC%88%98%EB%A0%B9" class="hash-link" aria-label="Direct link to 현장 사진 및 굿즈 수령" title="Direct link to 현장 사진 및 굿즈 수령">​</a></h2>
<div style="width:60%"><p><img decoding="async" loading="lazy" alt="현장" src="https://yuseon-lim.github.io/assets/images/IMG_5202-e7cf0c00402c1df1a0246fbabadc649c.jpg" width="4032" height="3024" class="img_ev3q"></p></div>
<p><img decoding="async" loading="lazy" alt="굿즈" src="https://yuseon-lim.github.io/assets/images/IMG_5212-d1baa9fa3355f7b35cd0d6f1bce35f14.jpg" width="4032" height="3024" class="img_ev3q"></p>
<p>현대자동차, 카카오뱅크 부스가 있어 빨대&amp;칫솔 세트와 수건을 받았다. 스프링캠프 주최측에선 손풍기를 주셨다. 이번 여름에 안그래도 사려고 했던 터라 마음에 쏙 들었고, 무엇보다 가장 좋았던건 키캡..!!! 키보드 덕후로서 키캡 굿즈라니 이건 최고야.. 스티커도 야무지게 챙겨왔다 ㅎㅎ</p>
<p>다들 서로 인사하고 하시던데 나만 친구가 없어서 약간 슬펐다.. 2024 하반기에는 커뮤니티 활동을 할 수 있는 기회가 있으면 좋겠다. 개발바닥이나 유쾌한 스프링 방 같은 오픈채팅도 들어가 있는데, 인싸력을 좀 더 키울 필요가 있겠다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="타임-테이블">타임 테이블<a href="https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024#%ED%83%80%EC%9E%84-%ED%85%8C%EC%9D%B4%EB%B8%94" class="hash-link" aria-label="Direct link to 타임 테이블" title="Direct link to 타임 테이블">​</a></h2>
<table><thead><tr><th>Track 1</th><th></th><th></th></tr></thead><tbody><tr><td>12:00 ~ 13:00</td><td>접수 / 등록</td><td></td></tr><tr><td>13:00 ~ 13:45</td><td>Tidy First</td><td>안영회</td></tr><tr><td>14:00 ~ 14:45</td><td>Spring AI : LLM에도 봄이 찾아오다.</td><td>황민호</td></tr><tr><td>14:45 ~ 15:15</td><td>Coffee Break</td><td></td></tr><tr><td>15:15 ~ 16:00</td><td>왜 나는 테스트를 작성하기 싫을까?</td><td>조성아</td></tr><tr><td>16:15 ~ 17:00</td><td>실전! MSA 개발 가이드</td><td>김용욱</td></tr><tr><td>17:15 ~ 18:00</td><td>구해줘 홈즈! 은행에서 3천만 트래픽의 홈 서비스 새로 만들기</td><td>이영규</td></tr></tbody></table>
<table><thead><tr><th>Track 2</th><th></th><th></th></tr></thead><tbody><tr><td>12:00 ~ 13:00</td><td>접수 / 등록</td><td></td></tr><tr><td>13:00 ~ 13:45</td><td>동시성의 미래 - 코루틴의 버츄얼 스레드</td><td>이상훈</td></tr><tr><td>14:00 ~ 14:45</td><td>Spring Coroutine In Action</td><td>최진영</td></tr><tr><td>14:45 ~ 15:15</td><td>Coffee Break</td><td></td></tr><tr><td>15:15 ~ 16:00</td><td>스프링 R2DBC 연동 기능을 활용한 작은 코틀린 SQL DSL 개발기</td><td>오현석</td></tr><tr><td>16:15 ~ 17:00</td><td>데이터를 스케치 하기</td><td>황영</td></tr><tr><td>17:15 ~ 18:00</td><td>AutoParams를 사용한 Spring Boot 응용프로그램 테스트</td><td>이규원</td></tr></tbody></table>
<p>두 트랙으로 나뉘어서 진행되었다. 해당 시간에 원하는 세션을 선택해서 들을 수 있었는데, 아직 코틀린으로 스프링을 다루어 본 적은 없어서 Track1 세션으로 쭉 들었다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-tidy-first">🌱 Tidy First?<a href="https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024#-tidy-first" class="hash-link" aria-label="Direct link to 🌱 Tidy First?" title="Direct link to 🌱 Tidy First?">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://m.media-amazon.com/images/I/414Lja0sVML._SY445_SX342_.jpg" alt="" class="img_ev3q"></p>
<p>TDD, 리팩토링의 저자로 유명한 켄트 백의 신간인 <em>Tidy First?</em> 의 역자이신 안영회님의 세션이였다.</p>
<p>Tidy는 한국말로 하면 '코드 정리' 쯤으로 번역할 수 있다. 이 책은 총 3권 시리즈로 구성되어 있고, Tidy First?는 이중 첫번째 책이다. 두번째 책은 <em>Tidy Together</em> 로 나올 가능성이 크다고 한다.</p>
<p>사실 소프트웨어 개발이란 요구사항에 맞는 결과물이 올바르게 나오기만 하면 되지만, 한번 만들고 끝이 아니라, 유지보수를 계속 해야한다. 따라서 변경에 용이한 코드를 짜는 것이 중요하다. 이 과정에서 필요한게 <strong>Tidy</strong>이고, 이것을 <strong>왜</strong> 해야 하는지, <strong>언제</strong> 해야 하는지, <strong>어떻게</strong> 해야 하는지에 대해 다루는 책이다.</p>
<p>이 책의 설명에 안영회님이 소프트웨어 개발에 대해 생각하는 바를 엿볼 수 있었는데</p>
<blockquote>
<p>소프트웨어 개발이란 '유기체'와 유사하다. "요소를 유익하게 관계맺는 일" 이다.</p>
</blockquote>
<p>이 문장이 인상깊었던 것 같다. 생물과 유사하게 소프트웨어도 쪼개면 작은 단위로 이루어져 있고, 그것들이 상호작용 해 하나의 시스템을 만들어 내기 때문이다.</p>
<p>짧은 경력을 갖고 있는 나지만,, 강연 내용에는 공감할 수 있는 내용이 아주 많았다. 코드는 완벽할 수 없고, 때론 급하게 작성하기도 하는데 이걸 언젠간 정리해야 한다. 미루면 미룰수록 하기 힘들어지고, 처음부터 잘 해놓는게 가장 베스트이다. 코드를 정리하는 방법론을 공부해서 적용해보면 더 좋을 것 같다.</p>
<p>책이 코드를 타이핑하면서 따라할 수 있게끔 구성되어 있다고 하는데, 스터디를 구성해서 완주를 한번 해보고 싶다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-spring-ai--llm에도-봄이-찾아오다">🌱 Spring AI : LLM에도 봄이 찾아오다.<a href="https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024#-spring-ai--llm%EC%97%90%EB%8F%84-%EB%B4%84%EC%9D%B4-%EC%B0%BE%EC%95%84%EC%98%A4%EB%8B%A4" class="hash-link" aria-label="Direct link to 🌱 Spring AI : LLM에도 봄이 찾아오다." title="Direct link to 🌱 Spring AI : LLM에도 봄이 찾아오다.">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/IMG_5206-f9b221b9546be64271d21c9c4e3bc380.jpg" width="2567" height="3193" class="img_ev3q"></p>
<p>카카오의 황민호님 세션이였다. LLM의 발전 과정과 Spring AI를 활용하는 방법에 대해 강연해주셨다. SpringAI의 특징을 간략하게 정리하면</p>
<ul>
<li>주요 AI Provider 통합<!-- -->
<ul>
<li>OpenAI, 마이크로소프트 Asure, 아마존, 구글 등 지원</li>
<li>채팅, 텍스트-이미지 변환 모델 유형 지원</li>
<li>동기식 및 스트림 지원</li>
</ul>
</li>
<li>주요 벡터DB 지원</li>
<li>AI 개발 편의<!-- -->
<ul>
<li>AI 모델 출력을 POJO로 매핑</li>
<li>Function Calling 지원</li>
<li>AI용 SpringBoot Starter 지원</li>
</ul>
</li>
</ul>
<p>정도가 있겠다. 지금 v.0점대 개발이 진행중이고 올해 하반기쯤 v1.0이 나온다고 한다. 나 또한 ChatGPT와 코파일럿을 정말 유용하게 쓰고 있다. AI가 정말 빠르게 발전하고 있다고 느껴진다. 개발자로서도 무시할 수 없는 흐름인 것 같다. 이러한 프레임워크를 이용해 AI를 사용 할 수 있는 능력을 갖춘 개발자도 곧 수요가 점점 늘어날 것 같다. 실제로 그런 것 같기도 하다.</p>
<p>보안적으로 국내 최고 예민한 우리회사도 최근 마이크로소프트 코파일럿을 이용할 수 있게 해주었다. IT분야가 AI시대를 맞으며 빠르게 변화하고 있다.</p>
<p>나도 다음 사이드 프로젝트는 AI를 활용한 프로젝트를 해보아야 겠다. <del>돈만 문제가 안된다면</del></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="️-coffee-break">☕️ Coffee Break<a href="https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024#%EF%B8%8F-coffee-break" class="hash-link" aria-label="Direct link to ☕️ Coffee Break" title="Direct link to ☕️ Coffee Break">​</a></h2>
<p><img decoding="async" loading="lazy" alt="alt text" src="https://yuseon-lim.github.io/assets/images/IMG_5207-a793293f018625106d4ab6ac4c4c2525.jpg" width="3007" height="3029" class="img_ev3q"></p>
<p>달다구리와 커피(또는 오렌지주스) 나눠주셔서 기력 충전했다 👍</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="왜-나는-테스트를-작성하기-싫을까">왜 나는 테스트를 작성하기 싫을까?<a href="https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024#%EC%99%9C-%EB%82%98%EB%8A%94-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0-%EC%8B%AB%EC%9D%84%EA%B9%8C" class="hash-link" aria-label="Direct link to 왜 나는 테스트를 작성하기 싫을까?" title="Direct link to 왜 나는 테스트를 작성하기 싫을까?">​</a></h2>
<p><img decoding="async" loading="lazy" alt="alt text" src="https://yuseon-lim.github.io/assets/images/IMG_5209-1cb7aeeec1af6e64c5f8ae4a49c19111.jpg" width="2458" height="2418" class="img_ev3q"></p>
<p>네이버 플라즈마팀의 조성아님 세션이였다. 테스트를 작성하는 자세에 대한 이야기였고, 오픈소스인 <a href="https://naver.github.io/fixture-monkey/v1-0-0/" target="_blank" rel="noopener noreferrer">🐵 FixtureMonkey</a>개발기와 사용 팁도 전달해주셨다.</p>
<p>픽스쳐몽키는 들어본 적이 있긴 한데, 테스트 라이브러리라고만 알고있고 용도는 몰랐다. 테스트에 필요한 객체들을 쉽게 생성해주는 라이브러리라고 한다. 테스트를 작성한 경험이 많지는 않지만, REST Docs로 테스트 작성할때, 필요한 오브젝트들을 생성자나 빌더로 생성해주는 과정은 꽤.. 귀찮긴 했다. 이러한 과정을 줄여줄 수 있다니 적극 검토해보아야 겠다는 생각을 했다.</p>
<p>테스트를 작성하면 안전성을 높여 신뢰성 있는 프로그램을 만들 수 있다. 하지만 테스트를 작성하는데에도 비용이 든다. 가장 큰 문제점은 요구사항이 추가되고 변경될때 테스트도 같이 수정이 필요하다는 것이다. 기능 하나 추가하고 필드 하나 추가했는데 몇백개의 테스트를 수정해야 한다면...? 끔찍하다.</p>
<p>이러한 트레이드오프를 고민한 경험에 대해 풀어주셨다. 이런 저런 실패를 경험하고 시행착오를 겪으며 테스트에 대해 나름의 정의를 한 과정을 공유해주셨다.</p>
<blockquote>
<p>모든 테스트 케이스, 엣지 케이스를 모두 테스트 하려고 하기보단 동작 여부 검증에 집중하자.</p>
</blockquote>
<p>테스트를 작성하는 것은 중요하지만, 지속 가능한 테스트를 작성하는것이 가장 중요하다! 는 메시지였다.</p>
<p>테스트의 필요성은 뼈저리게 느끼고 있다. 회사에서 SpringBoot로 된 부분은 한번 시작하면 타고타고 들어가 동작하는.. 마치 절차지향처럼 되어있다. 여기서 하나 수정하려고 하면 자신이 일단 없다. 수정을 해서 원래 동작했던 기능이 잘 될지 알 수가 없다. 심지어 리눅스에서만 동작하고, 정해진 폴더 구조에서만 동작하기 때문에 윈도우 IDE에서조차 돌릴 수 없다. 기능 하나 수정하면 길게는 40분.. 동안 코드를 실행해보고 로그를 통해서 디버깅 해야 하는 상황이다. 저번에 리팩토링 한다고 코드를 대거 수정한 적이 있었는데, 하루에 9/10 정도를 실행해서 결과보는 시간에 써야 했다. 테스트가 있었다면, 테스트가 가능한 환경을 염두에 두고 작성되었다면 이런 일이 없었을거다. 진짜 너무 힘들다..</p>
<p>하지만 이미 완성된 시스템에서 테스트를 추가하기란 쉽지 않다. 테스트를 고려하지 않고 짜여졌기 때문에, 유닛테스트와 같은 작은 단위의 테스트는 매우 힘들다. Q&amp;A에서 이것에 대한 힌트를 얻을 수 있었는데, 분리 가능한것을 분리하고 이것부터 테스트 하는 방법이다. 테스트 코드가 없지만, 나부터 일단 실천하고 테스트의 장점을 행동으로 입증해야겠다는 생각을 했다. 이번에 추가되는 기능은 꼭. 테스트 작성하면서 해보려고 한다.</p>
<p>일단 테스트 작성법부터 공부해야 할 것 같다. 테스트를 잘 하는 사람이 비지니스 코드도 잘 짜게 될 수 있을것 같다는 생각이 든다. 작은 단위의 테스트가 가능하다는 것은 결합도가 낮다는 뜻이기 때문이다. 여러모로 느끼는 것이 많았던 세션이다.</p>
<p>추가로 불편한 점을 개선하려고 오픈소스까지 개발하는 모습이 정말 멋있었다. 오픈소스 메인테이너라니 내 워너비다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="실전-msa-개발-가이드">실전! MSA 개발 가이드<a href="https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024#%EC%8B%A4%EC%A0%84-msa-%EA%B0%9C%EB%B0%9C-%EA%B0%80%EC%9D%B4%EB%93%9C" class="hash-link" aria-label="Direct link to 실전! MSA 개발 가이드" title="Direct link to 실전! MSA 개발 가이드">​</a></h2>
<p>삼성 SDS의 김용욱님의 강연이였다. 사내에서 MSA 컨설턴트와 개발을 하고 계신다고 한다. 이번 스프링캠프 강연중에서도 정말 인상깊었던 시간이였다.</p>
<p>간단하게 정리해보면 다음과 같다.</p>
<p>+++</p>
<p>MSA를 도입하려면 다음 두가지가 걱정이 된다.</p>
<ul>
<li>API로 속도가 괜찮을까?</li>
<li>트랜잭션 보장 없이 정합성이 맞을까?</li>
</ul>
<p><strong>📌 API로 속도가 괜찮을까?</strong></p>
<p>MSA로 시스템을 구성하게 되면 각 서비스는 API를 통해 통신하게 된다. 네트워크를 타기 때문에 속도에 대한 우려가 있기 마련이다. 이를 해결하는 방법은 이런 것들이 있다.</p>
<ol>
<li>데이터 복제<!-- -->
<ul>
<li>필요한 속성을 미리 복사해두고, 배치 등으로 sync를 맞춘다.</li>
<li>이때 주의할 것은 몽땅 복사하면 안된다는 것이다. DB Table로 치면, 몇개 필요한 속성만 복사해둔다.</li>
</ul>
</li>
<li>모델링 변경<!-- -->
<ul>
<li>설계할때 예를들어 '고객'과 '상담'테이블이 있다면, 해당 데이터가 '고객'과 관련된 데이터이고, 설계상 고객서비스와 같이있는 것이 원래의 그림일때 만약 '상담' 서비스에서 자주 참조하는 것이라면 고객정보지만 상담 서비스쪽에 데이터를 두는것이다. 이렇게 되면 서비스간 통신을 하지 않고도 해결할 수 있다.</li>
</ul>
</li>
<li>일괄 조회<!-- -->
<ul>
<li>200개를 조회한다고 치면, REST API 200개가 나가는 것이 아니라, 한번에 조회할 수 있게 해야 한다.</li>
<li>REST API의 N+1 Problem 문제가 있다.</li>
</ul>
</li>
<li>병렬 조회<!-- -->
<ul>
<li>순간적으로 큰 부하가 생길 수 있어 대부분의 경우 안티패턴이다.</li>
</ul>
</li>
<li>로컬 캐시<!-- -->
<ul>
<li>공통코드와 같이 변경이 적지만 자주 조회해야 하는 경우, 로컬캐시에 올려두고 사용한다.</li>
<li>Redis는 느리다.</li>
<li>로컬캐시는 동기화 하지 않는 것을 전제로 한다.<!-- -->
<ul>
<li>서비스가 여러개일때 이를 동기화 할 수 없다.</li>
<li>동기화 하는 것은 안티패턴이다.</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><strong>📌 트랜잭션 보장 없이 정합성이 맞을까?</strong></p>
<p>서비스가 나뉘어져 있기 때문에 하나의 기능에서 한번의 트랜잭션으로 동작을 모두 수행할 수 없다.</p>
<ul>
<li>MSA 구조의 경우 전체 과정에 대한 롤백이 불가능하다.</li>
<li>롤백 대신 실패시 삭제하는 API가 필요하다.</li>
<li>그럼 삭제하다가 실패하면 어쩌냐?<!-- -->
<ul>
<li>대사작업이 필요할 수 있다는것을 인지해둔다. (ex. 배치)</li>
</ul>
</li>
<li>API가 실패했을때 바로 재시도 하는것은 대부분 안티패턴이다.<!-- -->
<ul>
<li>해당 서비스가 회복할 시간을 주어야 한다.</li>
<li>그런데 이벤트 방식은 괜찮다!<!-- -->
<ul>
<li>이벤트로 재시도 하는 것은 해당 서비스가 가능할때 큐 등에서 끌어다 쓰는 것이라 괜찮다.</li>
</ul>
</li>
<li>그리고 실패라고 응답받았는데, 사실 성공했을 수도 있다는 것을 알아야 한다.<!-- -->
<ul>
<li>이렇게 되면 두번 수행하게 된다.</li>
<li>따라서 멱등성이 보장되어야 한다.</li>
</ul>
</li>
</ul>
</li>
<li>언제 이벤트로 분리하는가?<!-- -->
<ul>
<li>실패해도 전체 취소가 없다면 이벤트로 분리한다.</li>
</ul>
</li>
</ul>
<p>+++</p>
<p>하나하나 다 도움되고 공부할 수 있는 내용이라 열심히 적어본 세션이였다. 회사 프로젝트의 경우 MSA를 도입하기엔 사람도 없고, 작아서 당분간은 실무에서 경험 해볼 수 없는 점이 아쉽다.. 언젠가 개발할 때를 대비해 미리미리 공부해 두어야 겠다. MSA라는 개념이 멀게 느껴졌는데, 이번 세션을 들으면서 윤곽이 좀 보였던 것 같다. MSA를 적용한다는 것은 어떤 것이고, 주의할 점은 무엇인지 조금은 알 것 같다. 매우매우 좋았던 강연이였다!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="구해줘-홈즈-은행에서-3천만-트래픽의-홈-서비스-새로-만들기">구해줘 홈즈! 은행에서 3천만 트래픽의 홈 서비스 새로 만들기<a href="https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024#%EA%B5%AC%ED%95%B4%EC%A4%98-%ED%99%88%EC%A6%88-%EC%9D%80%ED%96%89%EC%97%90%EC%84%9C-3%EC%B2%9C%EB%A7%8C-%ED%8A%B8%EB%9E%98%ED%94%BD%EC%9D%98-%ED%99%88-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%83%88%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0" class="hash-link" aria-label="Direct link to 구해줘 홈즈! 은행에서 3천만 트래픽의 홈 서비스 새로 만들기" title="Direct link to 구해줘 홈즈! 은행에서 3천만 트래픽의 홈 서비스 새로 만들기">​</a></h2>
<p>카카오뱅크 홈서비스개발팀의 이영규님의 발표였다. 은행에서 홈 서비스의 분리 여정을 소개하는 내용이였다.</p>
<p>기술 부채로 해결하는 문제는 두가지 였다고 한다.</p>
<ul>
<li>구조적 문제</li>
<li>성능적 문제</li>
</ul>
<p><strong>📌 구조적 문제 - 핵사고날 아키텍처</strong></p>
<p>구조적 문제는 핵사고날 아키텍처를 적용해 풀었다고 한다. 요즘 정말 자주 들리는 단어인데, 아직 여기까지는 공부하지 못했다.🥲 도메인계층을 보호할 수 있는 아키텍처라고 한다. 개념을 잘 알지는 못해 아주 와닿진 않았지만, 어떤 것이 장점인지를 알게되어서 궁금하다는 생각이 커졌다. 공부할거 빨리 다 끝내고 아키텍처쪽도 파보고 싶다..</p>
<p><strong>📌 성능적 문제 - 코루틴 적용</strong></p>
<p>세가지가 고려 대상이였다고 한다.</p>
<ul>
<li>Spring @Async</li>
<li>Spring Webflux</li>
<li>코루틴</li>
</ul>
<p>코루틴을 채택하면서 Java에서 코틀린으로의 포팅작업도 이루어졌다고 한다. 코루틴은 나도 안드로이드 공부할때 접한 적이 있는데,, 제대로 사용해본 적은 없다. 멀티스레드를 다루기 좋다(?) 정도로만 알고 있었다. 요즘 코프링으로 개발하는사람이 부쩍 많아진 것 같고, 현업에서도 많이 쓰이는 듯 해보인다. 일단 자바를 정복하고,, 코틀린으로도 해보고 싶다.</p>
<p><strong>📌 이관시 안정성 확보</strong></p>
<p>좀 많이 새로웠던 부분이 이부분이였는데, 거의 새로운 프로젝트로 옮기면서, 그 전에 수행했던 기능이 잘 동작하는것을 검증하는것이 가장 중요했다고 한다. 그러면서 적용한 방법을 몇가지 소개해주셨는데, 아주 새로웠다.</p>
<ul>
<li>응답 비교 서비스<!-- -->
<ul>
<li>기존 서비스와 신규 서비스에 동일한 요청에서, 동일한 응답이 오는지 검증하는 서비스를 따로 만들었다고 한다.</li>
<li>조회 위주의 서비스라 가능한 듯 했다.</li>
<li>기존 서비스와 신규 서비스의 응답이 일치하지 않을 때, alert를 주면 로그를 확인해보는 방식으로 진행했다고 한다.</li>
</ul>
</li>
<li>표본 검사<!-- -->
<ul>
<li>모든 서비스를 비교하고 검증하기 힘들어서 작은 비율부터 점점 늘려나갔다고 한다.</li>
</ul>
</li>
<li>A/B 트래픽 분산<!-- -->
<ul>
<li>A/B 테스트를 하듯이 신규 서비스 / 기존 서비스로 트래픽을 분산시켰다고 한다.</li>
<li>비율은 설정등으로 유동적으로 변경할 수 있게 구성해서, 문제상황에서도 대처 가능하게끔 구성했다고 한다.</li>
</ul>
</li>
</ul>
<p>이 세션에서 이관에 대한 내용이 가장 새로웠다. 이런 방법을 생각해볼 수도 있구나. 놀랐었다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="마무리">마무리<a href="https://yuseon-lim.github.io/blog/2024/05/25/springcamp-2024#%EB%A7%88%EB%AC%B4%EB%A6%AC" class="hash-link" aria-label="Direct link to 마무리" title="Direct link to 마무리">​</a></h2>
<p>생각보다 엄청 타이트하게 진행되었다. 내년에 또 갈 수 있게 되면 밥 든든히 먹고,, 커피도 충분히 마시고 참여해야겠다고 생각했다 ㅋㅋ</p>
<p>참가하길 정말정말 잘했다고 생각이 들었다. 지금 들은 내용을 바로 흡수해서 실천하긴 어렵겠지만, 개발에 대한 나의 인사이트를 정말 넓게 확장시켜 줄 수 있는 좋은 기회였다고 생각한다. 온라인으로도 이런 자료들을 충분히 많이 접할 수 있지만 현장에서 듣는 것은 와닿는 정도가 다르다고 느꼈다.</p>
<p>오프라인 행사 참여는 처음이였는데 너무 좋았던 기억밖에 없어서, 다른 좋은 참여 기회가 또 있다면 적극적으로 참여할 생각이다.</p>
<p>오늘에 대한 감상이 다 날아가기전에 급하게 후다닥 적어보았다. 2025 스프링 캠프를 고민하신다면 꼭 참가해보시라고 권하고 싶다😚</p>
<br>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Java에서 new String()으로 인코딩을 변환 할 수는 없다.]]></title>
            <link>https://yuseon-lim.github.io/blog/2024/05/22/java-new-string-encoding</link>
            <guid>https://yuseon-lim.github.io/blog/2024/05/22/java-new-string-encoding</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Java에서 new String()으로 인코딩을 변환 할 수는 없다.]]></description>
            <content:encoded><![CDATA[<p>문자열 인코딩이 깨지는 문제를 해결하면서,
자바에서 문자열 인코딩 변환 시 하기 쉬운 실수에 대해 정리해 보았다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-문제-상황-정리">📌 문제 상황 정리<a href="https://yuseon-lim.github.io/blog/2024/05/22/java-new-string-encoding#-%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9-%EC%A0%95%EB%A6%AC" class="hash-link" aria-label="Direct link to 📌 문제 상황 정리" title="Direct link to 📌 문제 상황 정리">​</a></h2>
<p>어떤 파일을 읽어, UTF-8로 변환한 파일을 생성하는 부분에서 아래와 같이 문자열이 깨지는 현상이 발생했다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">�׽�Ʈ �غ���! ������</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>문제가 된 부분은 이부분 이였다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name" style="color:hsl(35, 99%, 36%)">BufferedReader</span><span class="token plain"> br </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">BufferedReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">InputStreamReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">FileInputStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">filePath</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"EUC-KR"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">BufferedWriter</span><span class="token plain"> bw </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Files</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">newBufferedWriter</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Paths</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">get</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">newFilePath</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">StandardOpenOption</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token constant" style="color:hsl(35, 99%, 36%)">APPEND</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> line </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">""</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">while</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">line </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> br</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">readLine</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">null</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 생략</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    bw</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">write</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">line</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getBytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"EUC-KR"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token string" style="color:hsl(119, 34%, 47%)">"UTF-8"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    bw</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">newLine</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>예를들어 파일 인코딩이 <code>EUC-KR</code>이라고 했을때 다음과 같은 일이 일어난다.</p>
<ol>
<li>EUC-KR로 파일을 읽는다.</li>
<li><code>br.readLine()</code> 으로 읽은 문자열(String)에서 EUC-KR 바이트 배열을 얻고, 이를 <code>new String()</code> 으로 UTF-8 캐릭터셋을 지정해 String을 생성한다.</li>
<li>파일에 쓴다.</li>
</ol>
<p>이 과정에서 문자열은 100% 깨지게 된다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-java-string-생성자는-인코딩을-변환하지-않는다">📌 Java String 생성자는 인코딩을 '변환'하지 않는다.<a href="https://yuseon-lim.github.io/blog/2024/05/22/java-new-string-encoding#-java-string-%EC%83%9D%EC%84%B1%EC%9E%90%EB%8A%94-%EC%9D%B8%EC%BD%94%EB%94%A9%EC%9D%84-%EB%B3%80%ED%99%98%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4" class="hash-link" aria-label="Direct link to 📌 Java String 생성자는 인코딩을 '변환'하지 않는다." title="Direct link to 📌 Java String 생성자는 인코딩을 '변환'하지 않는다.">​</a></h2>
<p>자바 인코딩을 변환하는 방법을 구글에서 검색하면</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">line</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getBytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"EUC-KR"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token string" style="color:hsl(119, 34%, 47%)">"UTF-8"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이런 코드를 종종 볼 수 있다. String의 생성자로 바이트 배열과 캐릭터셋을 받는 생성자가 있어 마치 변환이 될것만 같다.</p>
<p>하지만 이는 틀렸다.</p>
<p>정확하게 알려면 자바의 String 클래스를 살펴보아야 한다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-string-생성자-살펴보기">✅ String 생성자 살펴보기<a href="https://yuseon-lim.github.io/blog/2024/05/22/java-new-string-encoding#-string-%EC%83%9D%EC%84%B1%EC%9E%90-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0" class="hash-link" aria-label="Direct link to ✅ String 생성자 살펴보기" title="Direct link to ✅ String 생성자 살펴보기">​</a></h3>
<p><strong>String.java</strong>를 뜯어보면, <code>byte[]</code>를 전달하는 생성자들은 결국</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">private</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Charset</span><span class="token plain"> charset</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">byte</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> bytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">int</span><span class="token plain"> offset</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">int</span><span class="token plain"> length</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token comment" style="color:hsl(230, 4%, 64%)">//}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>함수를 거치게 됨을 알 수 있다.</p>
<p>캐릭터셋이 UTF_8, ISO_8859_1, US_ASCII이 아닐경우 CharsetDecoder로 디코딩 하는데,
이때 주어진 캐릭터셋으로 디코더를 생성하고, 디코딩한다. 다른 캐릭터셋으로 인코딩된 바이트배열을 읽으려고 하면 당연히 정상적으로 수행되지 않는다.</p>
<p>단순히 해당 캐릭터셋으로 디코딩 할 뿐, 변환하는 기능까지 수행하지 않는다.</p>
<p>따라서 캐릭터셋 A로 인코딩된 바이트 배열로 만들고, 이를 캐릭터셋 B로 지정해 <code>new String(line.getBytes(A), B)</code> 하게 될 경우, 자바는 들어온 바이트 배열을 캐릭터셋 B로 읽을 수 없어, 깨진 문자열이 되어버린다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-테스트">✅ 테스트<a href="https://yuseon-lim.github.io/blog/2024/05/22/java-new-string-encoding#-%ED%85%8C%EC%8A%A4%ED%8A%B8" class="hash-link" aria-label="Direct link to ✅ 테스트" title="Direct link to ✅ 테스트">​</a></h3>
<p>눈으로 확인해보기 위해</p>
<ul>
<li>각기 다른 캐릭터셋으로 바이트 배열을 생성하고</li>
<li>이를 출력하고</li>
<li>new String으로 다른 캐릭터셋을 지정해 출력해 보았다.</li>
</ul>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> original </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"테스트 문자열"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 각 인코딩 방식으로 바이트 배열 생성</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">byte</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> ms949Bytes </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> original</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getBytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Charset</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">forName</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"MS949"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">byte</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> utf8Bytes </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> original</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getBytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">StandardCharsets</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token constant" style="color:hsl(35, 99%, 36%)">UTF_8</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">byte</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> utf16Bytes </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> original</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getBytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">StandardCharsets</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token constant" style="color:hsl(35, 99%, 36%)">UTF_16</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">byte</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> eucKrBytes </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> original</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getBytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Charset</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">forName</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"EUC-KR"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 바이트 배열 출력</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"Original: "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> original</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"MS949 Bytes: "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Arrays</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">toString</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">ms949Bytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"UTF-8 Bytes: "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Arrays</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">toString</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">utf8Bytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"UTF-16 Bytes: "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Arrays</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">toString</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">utf16Bytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"EUC-KR Bytes: "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Arrays</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">toString</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">eucKrBytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 각 바이트 배열을 다른 인코딩으로 디코딩</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> ms949ToUtf8 </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">ms949Bytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">StandardCharsets</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token constant" style="color:hsl(35, 99%, 36%)">UTF_8</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> utf8ToMs949 </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">utf8Bytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Charset</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">forName</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"MS949"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> utf16ToEucKr </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">utf16Bytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Charset</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">forName</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"EUC-KR"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> eucKrToUtf16 </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">eucKrBytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">StandardCharsets</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token constant" style="color:hsl(35, 99%, 36%)">UTF_16</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 결과 출력</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"MS949 to UTF-8: "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> ms949ToUtf8</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"UTF-8 to MS949: "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> utf8ToMs949</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"UTF-16 to EUC-KR: "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> utf16ToEucKr</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"EUC-KR to UTF-16: "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> eucKrToUtf16</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>결과는 다음과 같다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">Original: 테스트 문자열</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">MS949 Bytes: [-59, -41, -67, -70, -58, -82, 32, -71, -82, -64, -38, -65, -83]</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">UTF-8 Bytes: [-19, -123, -116, -20, -118, -92, -19, -118, -72, 32, -21, -84, -72, -20, -98, -112, -20, -105, -76]</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">UTF-16 Bytes: [-2, -1, -47, 76, -62, -92, -46, -72, 0, 32, -69, 56, -57, -112, -59, -12]</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">EUC-KR Bytes: [-59, -41, -67, -70, -58, -82, 32, -71, -82, -64, -38, -65, -83]</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">MS949 to UTF-8: �׽�Ʈ ���ڿ�</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">UTF-8 to MS949: �뀒�뒪�듃 臾몄옄�뿴</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">UTF-16 to EUC-KR: ���L짚恬  �8�툐</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">EUC-KR to UTF-16: 엗붺욮₹껀�</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이로써 <code>new String()</code> 생성자로 문자열 인코딩을 변환할 수 없다는 사실을 확인했다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-한글을-인코딩디코딩-할땐-주의하자">📌 한글을 인코딩/디코딩 할땐 주의하자.<a href="https://yuseon-lim.github.io/blog/2024/05/22/java-new-string-encoding#-%ED%95%9C%EA%B8%80%EC%9D%84-%EC%9D%B8%EC%BD%94%EB%94%A9%EB%94%94%EC%BD%94%EB%94%A9-%ED%95%A0%EB%95%90-%EC%A3%BC%EC%9D%98%ED%95%98%EC%9E%90" class="hash-link" aria-label="Direct link to 📌 한글을 인코딩/디코딩 할땐 주의하자." title="Direct link to 📌 한글을 인코딩/디코딩 할땐 주의하자.">​</a></h2>
<p>new String()으로 잘못을 해도 영어는 대부분의 캐릭터셋이 1바이트 이기 때문에 문제가 될 일이 거의 없다.</p>
<p>하지만 한글의 경우 1에서 4바이트까지 가변형으로 저장되기 때문에 맞는 캐릭터셋을 지정해야 한다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-수정한-코드">📌 수정한 코드<a href="https://yuseon-lim.github.io/blog/2024/05/22/java-new-string-encoding#-%EC%88%98%EC%A0%95%ED%95%9C-%EC%BD%94%EB%93%9C" class="hash-link" aria-label="Direct link to 📌 수정한 코드" title="Direct link to 📌 수정한 코드">​</a></h2>
<p>문제가 된 코드를 아래와 같이 수정하면 된다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name" style="color:hsl(35, 99%, 36%)">BufferedReader</span><span class="token plain"> br </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">BufferedReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">InputStreamReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">FileInputStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">filePath</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"EUC-KR"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">BufferedWriter</span><span class="token plain"> bw </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Files</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">newBufferedWriter</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Paths</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">get</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">filePath</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">StandardCharsets</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token constant" style="color:hsl(35, 99%, 36%)">UTF_8</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">StandardOpenOption</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token constant" style="color:hsl(35, 99%, 36%)">APPEND</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> line </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">""</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">while</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">line </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> br</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">readLine</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">!=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">null</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 생략</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    bw</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">write</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">line</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    bw</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">newLine</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>BufferedWriter 자체를 utf-8로 지정하여 생성한다.</li>
<li>따로 읽은 String을 byte array로 변환하여 인코딩을 변환하는 작업 없이, 바로 쓴다.</li>
</ul>
<p>new String으로 인코딩을 변환하려면 이렇게 하면 된다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">byte</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> ms949Bytes </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> original</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getBytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Charset</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">forName</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"MS949"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> ms949String </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">ms949Bytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"MS949"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">byte</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"> utf8Bytes </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> ms949String</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getBytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">StandardCharsets</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token constant" style="color:hsl(35, 99%, 36%)">UTF_8</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> utf9String </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">utf8Bytes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">StandardCharsets</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token constant" style="color:hsl(35, 99%, 36%)">UTF_8</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-정리">📌 정리<a href="https://yuseon-lim.github.io/blog/2024/05/22/java-new-string-encoding#-%EC%A0%95%EB%A6%AC" class="hash-link" aria-label="Direct link to 📌 정리" title="Direct link to 📌 정리">​</a></h2>
<ul>
<li>자바의 String 생성자는 인코딩을 변환하는 역할을 하지 않는다.</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="-참고자료">📌 참고자료<a href="https://yuseon-lim.github.io/blog/2024/05/22/java-new-string-encoding#-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C" class="hash-link" aria-label="Direct link to 📌 참고자료" title="Direct link to 📌 참고자료">​</a></h2>
<ul>
<li><a href="https://kin.naver.com/knowhow/detail.nhn?docId=527939" target="_blank" rel="noopener noreferrer">Java Character Set의 이해</a></li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[json을 다형성 적용된 클래스로 역직렬화 하기]]></title>
            <link>https://yuseon-lim.github.io/blog/2024/05/05/deserialize-polymorphism-subclasses</link>
            <guid>https://yuseon-lim.github.io/blog/2024/05/05/deserialize-polymorphism-subclasses</guid>
            <pubDate>Sun, 05 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[jackson으로 json 역직렬화시 필드 값으로 매핑 타입을 결정하는 방법을 알아본다.]]></description>
            <content:encoded><![CDATA[<p>다양한 json 구조를 다형성을 적용한 (인터페이스, 상속 ...) 자바 객체로 역직렬화 하기!</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>이해를 돕기 위해 저의 상황을 설명해 놓았으나, 이 경우가 아니더라도 <strong>Jackson</strong>을 사용하는 모든 곳에 적용 가능한 방법입니다. :)</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="클래스-구조">클래스 구조<a href="https://yuseon-lim.github.io/blog/2024/05/05/deserialize-polymorphism-subclasses#%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%EC%A1%B0" class="hash-link" aria-label="Direct link to 클래스 구조" title="Direct link to 클래스 구조">​</a></h2>
<p>opensearch(≒elasticsearch) 인덱스 매핑이 dynamic으로 되어 있고, type별로 json 구조가 달랐습니다. 기존 코드는 HashMap으로 읽은 다음 <code>.get().get()...</code> 하는 구조로 되어 있었습니다🥲.</p>
<p>해결법이 있을 거라 굳게 믿고, draw.io를 켜 야심차게 인터페이스와 추상클래스로 아래 구조로 추상화를 해보았습니다. (회사 코드를 가져올 수 없어 클래스 이름은 임의로 정했습니다.)</p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/20240505112503-31d5e2175cc9d6d90ab3337dbd04b34d.png" width="574" height="496" class="img_ev3q"></p>
<p><code>opensearch-java</code> 라이브러리를 사용해서 다음과 같이 response를 지정한 클래스로 역직렬화 할 수 있습니다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name" style="color:hsl(35, 99%, 36%)">SearchResponse</span><span class="token generics punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token generics class-name" style="color:hsl(35, 99%, 36%)">IndexData</span><span class="token generics punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"> searchResponse </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> client</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">search</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">s </span><span class="token operator" style="color:hsl(221, 87%, 60%)">-&gt;</span><span class="token plain"> s</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">index</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">index</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">IndexData</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>opensearch-java는 내부적으로 <strong>jackson</strong> 라이브러리를 사용하고 있습니다.</p>
<p>해결법은 의외로 간단했는데요, Jackson에서 제공하는 어노테이션으로 서브 타입을 매핑하면 됩니다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="매핑-타입을-지정하지-않았을-때">매핑 타입을 지정하지 않았을 때<a href="https://yuseon-lim.github.io/blog/2024/05/05/deserialize-polymorphism-subclasses#%EB%A7%A4%ED%95%91-%ED%83%80%EC%9E%85%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%98%EC%9D%84-%EB%95%8C" class="hash-link" aria-label="Direct link to 매핑 타입을 지정하지 않았을 때" title="Direct link to ��매핑 타입을 지정하지 않았을 때">​</a></h2>
<p>일단 아무런 조치를 하지 않았을 때, 어떤 일이 일어나는지 살펴봅시다. 아래와 같은 json을 Document.class로 역직렬화 해보겠습니다.</p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token property" style="color:hsl(5, 74%, 59%)">"policies"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token property" style="color:hsl(5, 74%, 59%)">"type"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"a"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token property" style="color:hsl(5, 74%, 59%)">"type"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"b"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">      </span><span class="token property" style="color:hsl(5, 74%, 59%)">"type"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"c"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name" style="color:hsl(35, 99%, 36%)">ObjectMapper</span><span class="token plain"> objectMapper </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">ObjectMapper</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> json </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"{\"policies\":[{\"type\":\"a\"},{\"type\":\"b\"},{\"type\":\"c\"}]}"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Document</span><span class="token plain"> document </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> objectMapper</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">readValue</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">json</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">com</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">fasterxml</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">jackson</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">databind</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">exc</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">InvalidDefinitionException</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Cannot</span><span class="token plain"> construct instance of `</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">hello</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">jsontest</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">classes</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Policy</span><span class="token plain">` </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">no </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Creators</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> like </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">default</span><span class="token plain"> constructor</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> exist</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">abstract</span><span class="token plain"> types either need </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">to</span><span class="token plain"> </span><span class="token namespace">be</span><span class="token plain"> mapped </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">to</span><span class="token plain"> </span><span class="token namespace">concrete</span><span class="token plain"> types</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> have custom deserializer</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> or contain additional type information</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>InvalidDefinitionException</code> 이 터집니다. 정확한 타입을 지정해주거나 추가 정보를 제공해주라고 하네요.</p>
<p>Jackson이 제공하는 어노테이션으로 타입을 지정하는 방법을 알아봅시다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="jsontypeinfo과-jsonsubtypes">@JsonTypeInfo과 @JsonSubTypes<a href="https://yuseon-lim.github.io/blog/2024/05/05/deserialize-polymorphism-subclasses#jsontypeinfo%EA%B3%BC-jsonsubtypes" class="hash-link" aria-label="Direct link to @JsonTypeInfo과 @JsonSubTypes" title="Direct link to @JsonTypeInfo과 @JsonSubTypes">​</a></h2>
<p><code>@JsonTypeInfo</code>는 서브 타입을 어떤 정보를 사용해 지정할 것인지 정해주는 어노테이션,<br>
<code>@JsonSubTypes</code>는 실제 서브타입을 어떤 클래스로 지정할 것인지 정해주는 어노테이션 입니다.</p>
<p>위 클래스 구조에서, Policy 클래스에 매핑 정보를 정의하려면 이렇게 할 수 있습니다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token annotation punctuation" style="color:hsl(119, 34%, 47%)">@JsonTypeInfo</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">use </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Id</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token constant" style="color:hsl(35, 99%, 36%)">NAME</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> include </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">As</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token constant" style="color:hsl(35, 99%, 36%)">EXISTING_PROPERTY</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> property </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"type"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token annotation punctuation" style="color:hsl(119, 34%, 47%)">@JsonSubTypes</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token annotation punctuation" style="color:hsl(119, 34%, 47%)">@JsonSubTypes.Type</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">APolicy</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> name </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"a"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token annotation punctuation" style="color:hsl(119, 34%, 47%)">@JsonSubTypes.Type</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">BPolicy</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> name </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"b"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token annotation punctuation" style="color:hsl(119, 34%, 47%)">@JsonSubTypes.Type</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">value </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">CPolicy</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> name </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"c"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">public</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">interface</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Policy</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name" style="color:hsl(35, 99%, 36%)">ObjectMapper</span><span class="token plain"> objectMapper </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">ObjectMapper</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> json </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"{\"policies\":[{\"type\":\"a\"},{\"type\":\"b\"},{\"type\":\"c\"}]}"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Document</span><span class="token plain"> document </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> objectMapper</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">readValue</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">json</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"document.getPolicies().get(0).getClass() = "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getPolicies</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">get</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getClass</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"document.getPolicies().get(1).getClass() = "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getPolicies</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">get</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getClass</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">System</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">out</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">println</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"document.getPolicies().get(2).getClass() = "</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getPolicies</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">get</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">2</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getClass</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위 코드를 실행하면 다음과 같은 결과를 얻을 수 있습니다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getPolicies</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">get</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">0</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getClass</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token plain"> </span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">hello</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">jsontest</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">classes</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">APolicy</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getPolicies</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">get</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">1</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getClass</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token plain"> </span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">hello</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">jsontest</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">classes</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">BPolicy</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getPolicies</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">get</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token number" style="color:hsl(35, 99%, 36%)">2</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getClass</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token plain"> </span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">hello</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">jsontest</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">classes</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">CPolicy</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>의도된 대로 역직렬화가 잘 된것을 볼 수 있습니다. 👍</p>
<p>위에 적용된 옵션에 대한 설명입니다.</p>
<ul>
<li><strong>@JsonTypeInfo</strong>
<ul>
<li>name이라는 특정 property를 지정해 타입 구분</li>
<li>이미 존재하는 "type"이라는 필드로 타입을 구분합니다.</li>
</ul>
</li>
<li><strong>@JsonSubTypes</strong>
<ul>
<li>"a"라는 name은 APolicy.class에, "b"라는 name은 BPolicy.class에</li>
<li>와 같은 구현 정보를 매핑해줍니다.</li>
</ul>
</li>
</ul>
<p>따라서 Jackson은 "type"필드 값이 a라면 APolicy, b라면 BPolicy를 매핑할 수 있게 된 것입니다.</p>
<p><code>use</code>에는 세 옵션을 사용할 수 있습니다.</p>
<ul>
<li><strong>Id.CLASS</strong>: 클래스 명으로 서브타입을 구분하겠다는 의미입니다.<!-- -->
<ul>
<li>직렬화시 class 명이 json에 남게 됩니다.</li>
</ul>
</li>
<li><strong>Id.NAME</strong>: 위 예시처럼, 특정 프로퍼티를 name으로 지정해 구분합니다.<!-- -->
<ul>
<li>include = As.PROPERTY<!-- -->
<ul>
<li>직렬화 시 type 정보가 생성됩니다.</li>
</ul>
</li>
<li>include = As.EXISTING_PROPERTY<!-- -->
<ul>
<li>직렬화 시 기존 필드를 사용합니다. (새로운 필드가 생성되지 않습니다)</li>
</ul>
</li>
</ul>
</li>
<li><strong>Id.DEDUCTION</strong>: 각각의 서브 타입에서 구분할만한 필드가 있다면, jackson에서 추론해 변환해주는 설정입니다.</li>
</ul>
<p>각각의 상황에 맞게 적용해 주면 되겠습니다 :)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="마치며">마치며<a href="https://yuseon-lim.github.io/blog/2024/05/05/deserialize-polymorphism-subclasses#%EB%A7%88%EC%B9%98%EB%A9%B0" class="hash-link" aria-label="Direct link to 마치며" title="Direct link to 마치며">​</a></h2>
<p>기존의 HashMap을 이용한 코드에서, 자바답게 다형성을 유지하며 역직렬화를 할 수 있게 되어서, 더욱 깔끔하고 유연한 코드를 작성할 수 있게 되었습니다. 역시 안되는 것은 없네요..😚</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Process.waitFor() 이 영원히 끝나지 않는다.]]></title>
            <link>https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur</link>
            <guid>https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur</guid>
            <pubDate>Mon, 08 Apr 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[자바에서 외부 프로세스에 exec() 명령을 전달하고, waitFor() 메서드 사용시 행이 걸리는 이슈]]></description>
            <content:encoded><![CDATA[<p>Java에서 command를 실행하는 부분에서, 행이 걸리는 이슈가 발생했다. 아무 오류도 나타나지 않고 시스템이 행이 걸려버렸다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-상황">문제 상황<a href="https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9" class="hash-link" aria-label="Direct link to 문제 상황" title="Direct link to 문제 상황">​</a></h2>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name" style="color:hsl(35, 99%, 36%)">Process</span><span class="token plain"> process </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Runtime</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getRuntime</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">exec</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">command</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">waitFor</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 여기가 문제</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>waitFor()</code> 가 끝나지 않는 문제가 있었다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="원인">원인<a href="https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EC%9B%90%EC%9D%B8" class="hash-link" aria-label="Direct link to 원인" title="Direct link to 원인">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="문제가-된-부분">문제가 된 부분<a href="https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EB%AC%B8%EC%A0%9C%EA%B0%80-%EB%90%9C-%EB%B6%80%EB%B6%84" class="hash-link" aria-label="Direct link to 문제가 된 부분" title="Direct link to 문제가 된 부분">​</a></h3>
<p>원인은 생각보다 금방 찾을 수 있었다. 유명한 이슈였다..! <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html" target="_blank" rel="noopener noreferrer">JavaDoc</a>에도 이런 내용이 있다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><blockquote>
<p>Because some native platforms only provide limited buffer size for standard input and output streams, failure to promptly write the input stream or read the output stream of the subprocess may cause the subprocess to block, or even deadlock.</p>
</blockquote><p>일부 네이티브 플랫폼은 표준 입력 및 출력 스트림에 대해 제한된 버퍼 크기만을 제공하기 때문에, 입력 스트림을 즉시 작성하거나 하위 프로세스의 출력 스트림을 읽지 않으면 하위 프로세스가 차단되거나 심지어 교착 상태에 빠질 수 있다.</p></div></div>
<p>Process 클래스를 통해 서브 프로세스를 생성하고, <code>exec()</code> 으로 실행한다. 하위프로세스는 Process 클래스의 <code>getInputStream()</code>과 <code>getErrorStream()</code> 메서드를 통해 출력 메시지를 부모 프로세스에 보낸다. 그리고 문제가 된 코드는 아래 방식으로 출력과 오류를 <strong>순차적</strong>으로 읽고 처리한다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">BufferedReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">InputStreamReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getInputStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"UTF-8"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 로그에 쓰는 작업 ..</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">BufferedReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">InputStreamReader</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getErrorStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"UTF-8"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 로그에 쓰는 작업 ..</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>그런데 이때 만약 실행되는 프로세스가 많은 양의 출력을 생성하고, 이를 빠르게 읽어들이지 않으면 버퍼가 가득 차서 프로세스가 블록될 수 있다.</p>
<p>데드락이 발생하는 상황은 다음과 같다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="데드락이-발생하는-상황">데드락이 발생하는 상황<a href="https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EB%8D%B0%EB%93%9C%EB%9D%BD%EC%9D%B4-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EC%83%81%ED%99%A9" class="hash-link" aria-label="Direct link to 데드락이 발생하는 상황" title="Direct link to 데드락이 발생하는 상황">​</a></h3>
<ol>
<li><strong>외부 프로세스 실행</strong>: 자바에서 <code>Runtime.exec()</code> 또는 <code>ProcessBuilder.start()</code>를 사용하여 외부 프로세스를 실행, 자바 애플리케이션(부모 프로세스)과 외부 프로세스(자식 프로세스) 사이에는 표준 입력, 출력, 오류 스트림을 통한 데이터 교환이 가능해진다.</li>
<li><strong>데이터 쓰기 및 읽기 시작</strong>: 자바 애플리케이션은 외부 프로세스의 표준 출력과 표준 오류 스트림을 읽기 시작한다. 동시에 외부 프로세스는 실행 결과를 표준 출력 및 표준 오류 스트림으로 출력하기 시작할 수 있다.</li>
<li><strong>버퍼 가득 참</strong>: 외부 프로세스가 많은 양의 데이터를 빠르게 출력하면 표준 출력 또는 표준 오류 스트림의 버퍼가 가득 찬다. 이 상태에서 자바 애플리케이션이 버퍼에서 데이터를 빨리 읽지 않으면 외부 프로세스는 버퍼에 데이터를 더이상 쓸 수 없게 된다.</li>
<li><strong>자바 애플리케이션 처리 지연</strong>: 만약 자바 애플리케이션이 표준 출력만 읽고 표준 오류는 나중에 읽으려고 한다면, 표준 오류의 버퍼가 가득 차 있으면서 표준 출력의 처리가 완료되지 않는 상황이 발생할 수 있다. 이는 외부 프로세스가 더 이상 진행되지 못하게 하고, 자바 애플리케이션도 외부 프로세스의 종료를 기다리는 데드락 상태에 빠지게 한다.</li>
<li><strong>데드락</strong>: 결국 외부 프로세스는 표준 출력 또는 표준 오류 스트림으로 데이터를 더 출력할 수 없어 실행을 멈추고, 자바 애플리케이션은 외부 프로세스의 완전한 종료를 기다리면서 더 이상 진행하지 못한다. 결과적으로, 두 프로세스 모두 서로의 다음 단계를 기다리는 상태에 빠지게 되어 데드락이 발생한다.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="해결방법">해결방법<a href="https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95" class="hash-link" aria-label="Direct link to 해결방법" title="Direct link to 해결방법">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="내용이-필요-없을-경우---close">내용이 필요 없을 경우 - close()<a href="https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EB%82%B4%EC%9A%A9%EC%9D%B4-%ED%95%84%EC%9A%94-%EC%97%86%EC%9D%84-%EA%B2%BD%EC%9A%B0---close" class="hash-link" aria-label="Direct link to 내용이 필요 없을 경우 - close()" title="Direct link to 내용이 필요 없을 경우 - close()">​</a></h3>
<p>입력스트림, 출력스트림을 사용할 일이 없다면 <code>waitFor()</code> 전에 스트림을 다 닫아준다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name" style="color:hsl(35, 99%, 36%)">Process</span><span class="token plain"> process </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> processBuilder</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">start</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// or</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Process</span><span class="token plain"> process </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Runtime</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getRuntime</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">exec</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">command</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getErrorStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">close</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getInputStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">close</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getOutputStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">close</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">process</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">waitFor</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="apache-commons-exec-사용">Apache Commons Exec 사용<a href="https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#apache-commons-exec-%EC%82%AC%EC%9A%A9" class="hash-link" aria-label="Direct link to Apache Commons Exec 사용" title="Direct link to Apache Commons Exec 사용">​</a></h3>
<div class="language-gradle codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-gradle codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token comment" style="color:hsl(230, 4%, 64%)">// build.gradle</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token keyword" style="color:hsl(301, 63%, 40%)">implementation</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'org.apache.commons:commons-exec:1.3'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>의존성을 추가하고, 사용하면 해결법을 직접 구현할 필요 없이 안전하게 사용 가능하다고 한다. 나는 다른 방법을 사용해 해결했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="스레드-병렬처리">스레드 병렬처리<a href="https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EC%8A%A4%EB%A0%88%EB%93%9C-%EB%B3%91%EB%A0%AC%EC%B2%98%EB%A6%AC" class="hash-link" aria-label="Direct link to 스레드 병렬처리" title="Direct link to 스레드 병렬처리">​</a></h3>
<ul>
<li>외부 프로세스의 표준 출력 스트림을 읽는 스레드를 생성하고 시작한다.</li>
<li>외부 프로세스의 표준 에러 스트림을 읽기 위한 또 다른 별도의 스레드를 생성하고 시작한다.</li>
<li>두 스레드를 병렬 처리 한다.</li>
</ul>
<p>이렇게 처리하면 한 스트림의 버퍼가 가득 차 블록되더라도 다른 스트림의 데이터를 계속 읽을 수 있어 데드락을 방지할 수 있다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="-redirect-error-stream">✅ Redirect Error Stream<a href="https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#-redirect-error-stream" class="hash-link" aria-label="Direct link to ✅ Redirect Error Stream" title="Direct link to ✅ Redirect Error Stream">​</a></h3>
<p>나는 이 방법을 이용해 처리했다.</p>
<p><strong>ProcessBuilder</strong>의 <code>redirectErrorStream(true)</code> 를 사용해 표준 에러 스트림을 표준 출력 스트림으로 리다이렉션 해 단일 스트림으로 모든 출력을 읽을 수 있도록 한다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token class-name" style="color:hsl(35, 99%, 36%)">ProcessBuilder</span><span class="token plain"> pb </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">new</span><span class="token plain"> </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">ProcessBuilder</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">command</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">pb</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">redirectErrorStream</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token boolean" style="color:hsl(35, 99%, 36%)">true</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 표준 에러 스트림을 표준 출력 스트림으로 리다이렉션</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>두 스트림을 하나의 스트림으로 처리하면, 표준 출력을 계속 읽어낼때 표준 에러 스트림에서 발생하는 데이터도 처리되기 때문에 버퍼를 지속적으로 비워줄 수 있다.</p>
<p>Runtime으로 작성되어 있던 코드를 ProcessBuilder를 사용하도록 해주고, <code>redirectErrorStream(true)</code> 로 설정하니 문제가 해결되었다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="참고자료">참고자료<a href="https://yuseon-lim.github.io/blog/2024/04/08/Process.waitfor-dealock-occur#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C" class="hash-link" aria-label="Direct link to 참고자료" title="Direct link to 참고자료">​</a></h2>
<ul>
<li><a href="https://d2.naver.com/helloworld/1113548" target="_blank" rel="noopener noreferrer">https://d2.naver.com/helloworld/1113548</a></li>
<li><a href="https://stackoverflow.com/questions/5483830/process-waitfor-never-returns" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/5483830/process-waitfor-never-returns</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html</a></li>
</ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Spring REST Docs + OAS 적용기]]></title>
            <link>https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3</link>
            <guid>https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3</guid>
            <pubDate>Sat, 30 Mar 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Spring REST Docs + OAS 선택한 이유, 방법, 그리고 몇 가지 유용한 팁]]></description>
            <content:encoded><![CDATA[<p>이번 프로젝트에 <strong>Spring REST Docs + OAS</strong>를 도입해본 후기 및 몇가지 팁 :)</p>
<div class="theme-admonition theme-admonition-danger admonition_xJq3 alert alert--danger"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>danger</div><div class="admonitionContent_BuS1"><p><strong>restdocs-api-spec</strong> 라이브러리 사용시, <code>@ModelAttribute</code>, <code>@RequestParts</code> 에 대한 문서화가 어려운 점을 발견했습니다. 반드시 이 어노테이션이 필요한 경우, springdoc을 고려해보는게 좋을 듯 합니다 :)</p></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="필요성">필요성<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#%ED%95%84%EC%9A%94%EC%84%B1" class="hash-link" aria-label="Direct link to 필요성" title="Direct link to 필요성">​</a></h2>
<p>앱개발자와 협업할때 API 문서화가 필요할 것이라 생각되어 Swagger를 쓰기로 했는데, 나의 제안으로 REST DOCS + OAS를 도입하게 되었다. 이 글을 보는 사람들에게 Spring REST Docs + OAS를 팔아보려고 한다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="신뢰성이-높다">신뢰성이 높다.<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#%EC%8B%A0%EB%A2%B0%EC%84%B1%EC%9D%B4-%EB%86%92%EB%8B%A4" class="hash-link" aria-label="Direct link to 신뢰성이 높다." title="Direct link to 신뢰성이 높다.">​</a></h3>
<p>REST Docs로 문서를 만들면 반드시 테스트를 통과해야 결과물이 만들어지기 때문에 신뢰성이 높다. 강력한 장점이다.</p>
<p>만약 api 수정후 swagger 관련 어노테이션을 수정하지 않으면, 실제 api와 다른 문서가 만들어진다.</p>
<p>반면 REST Docs를 적용하면 api 테스트를 거쳐야만 문서가 완성되기 때문에, 프론트엔드 개발자나 외부 REST API를 사용하는 사람들에게 더 신뢰성 있는 문서를 전달할 수 있게 된다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="예쁘다">예쁘다.<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#%EC%98%88%EC%81%98%EB%8B%A4" class="hash-link" aria-label="Direct link to 예쁘다." title="Direct link to 예쁘다.">​</a></h3>
<p>Spring REST Docs를 사용하면, <code>adoc</code>파일 형식으로 api 결과물이 나온다. 졸업프로젝트에서, 이 REST Docs를 도입해 모든 api에 대한 테스트를 작성하고, 자동 문서화를 적용해 매우 뿌듯한 기억이 있었다.<a href="https://2e2i.github.io/mamomo-server/" target="_blank" rel="noopener noreferrer">(🔗링크)</a> 하지만,, 정말 못생겼다.</p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/2024-03-268.58.04-2e6ca2b2625adbbe60107aa1427e1c80.png" width="1986" height="2074" class="img_ev3q"></p>
<p>게다가 인덱싱이나 링크 등 커스텀을 하려면 한땀한땀 수정해줘야 했다. 자동화는 맞는데.. 반 자동화다.</p>
<p>반면, Swagger를 사용하면 가독성이 매우 좋은 결과물을 만들 수 있다.
게다가 <code>Try it</code> 버튼으로 API 테스트까지 할 수 있어 프론트개발자에게도 매우 편리하다. JWT 토큰을 넣어 테스트 하거나, Request 정보를 수정해서 테스트도 가능하다.</p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/2024-03-271.31.42-03bb0f7a148e808eff92b909645c0e7e.png" width="2908" height="2008" class="img_ev3q"></p>
<p>큰 제목 아래 '.json'이나 '.yml'링크가 있는데, Swagger를 만든 원본 OpenAPI 스팩 파일이다. 이것을 다운로드 받아서 Postman으로 Import 할 수도 있다.👍</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="확장성이-좋다">확장성이 좋다.<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#%ED%99%95%EC%9E%A5%EC%84%B1%EC%9D%B4-%EC%A2%8B%EB%8B%A4" class="hash-link" aria-label="Direct link to 확장성이 좋다." title="Direct link to 확장성이 좋다.">​</a></h3>
<p>현재 멀티모듈 구조를 택해서, 모듈별로 <code>yml</code>파일이 생성된다. SwaggerUI를 활용하면 이를 통합할 수 있다.</p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/2024-03-271.40.37-af97084922fcda25482f34fa22f198ca.png" width="2958" height="432" class="img_ev3q">
<img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/2024-03-271.40.49-6e158bd2894ae55d7e38c29156646261.png" width="2942" height="460" class="img_ev3q"></p>
<p>이렇게 통합하는 기능도 제공한다. 이러한 기능은 Spring REST Docs 뿐만 아니라, 다른 백엔드 프레임워크의 문서화 결과물도 통합할 수 있게 해준다.</p>
<p>Swagger는 OpenAPI 스팩 기반으로 만들어진다.</p>
<ul>
<li><a href="https://swagger.io/specification/" target="_blank" rel="noopener noreferrer">Swagger OpenAPI Specification</a></li>
<li><a href="https://spec.openapis.org/oas/v3.1.0" target="_blank" rel="noopener noreferrer">OpenAPI Specification 공식문서</a></li>
</ul>
<p>그래서 OpenAPI 스팩에 맞는 <code>yml</code>, <code>json</code>파일만 만들면 Swagger로 예쁘게 문서화 할 수 있다. 그렇기 때문에 Spring, Django, nest.js를 혼합해서 쓰는 프로젝트에서도 양식에 맞는 파일만 만들면 API 문서를 통합할 수 있다.</p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/openapi3-ec1f2c231a2aa3793c1fa1935536644a.png" width="2000" height="1231" class="img_ev3q">
(사진 출처: <a href="https://velog.io/@letsdev/MSA-Swagger-UI%EB%A1%9C-API-%EB%AC%B8%EC%84%9C-%ED%86%B5%ED%95%A9-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-3-Gradle-Task-from-ePages-Plugin" target="_blank" rel="noopener noreferrer">https://velog.io/@letsdev</a>)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="spring-rest-docs에-oas-적용하기">Spring REST Docs에 OAS 적용하기<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#spring-rest-docs%EC%97%90-oas-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to Spring REST Docs에 OAS 적용하기" title="Direct link to Spring REST Docs에 OAS 적용하기">​</a></h2>
<p>Spring REST Docs에 <a href="https://github.com/ePages-de/restdocs-api-spec" target="_blank" rel="noopener noreferrer">restdocs-api-spec</a> 라이브러리를 얹으면 된다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="dependency-추가-및-gradle-task-세팅">dependency 추가 및 gradle task 세팅<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#dependency-%EC%B6%94%EA%B0%80-%EB%B0%8F-gradle-task-%EC%84%B8%ED%8C%85" class="hash-link" aria-label="Direct link to dependency 추가 및 gradle task 세팅" title="Direct link to dependency 추가 및 gradle task 세팅">​</a></h3>
<div class="language-gradle codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-gradle codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">plugins</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    id </span><span class="token string" style="color:hsl(119, 34%, 47%)">'com.epages.restdocs-api-spec'</span><span class="token plain"> version </span><span class="token string" style="color:hsl(119, 34%, 47%)">'0.19.1'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">openapi3 </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    server </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'서버 주소'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    title </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'제목'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    description </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'설명'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    version </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'0.1.0(버전)'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    outputFileNamePrefix </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'파일명'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    format </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">'yaml or json'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="테스트-코드-작성">테스트 코드 작성<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1" class="hash-link" aria-label="Direct link to 테스트 코드 작성" title="Direct link to 테스트 코드 작성">​</a></h3>
<p>기존 REST Docs 코드에</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token operator" style="color:hsl(221, 87%, 60%)">-</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">import</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">static</span><span class="token plain"> </span><span class="token import static namespace">org</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">springframework</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">restdocs</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">mockmvc</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static class-name" style="color:hsl(35, 99%, 36%)">MockMvcRestDocumentation</span><span class="token import static punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static">document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">import</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">static</span><span class="token plain"> </span><span class="token import static namespace">com</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">epages</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">restdocs</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static namespace">apispec</span><span class="token import static namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static class-name" style="color:hsl(35, 99%, 36%)">MockMvcRestDocumentationWrapper</span><span class="token import static punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token import static">document</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>MockMvcRestDocumentation</code>를 <code>MockMvcRestDocumentationWrapper</code>로 대체하면 된다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="결과��물-생성">결과물 생성<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#%EA%B2%B0%EA%B3%BC%EB%AC%BC-%EC%83%9D%EC%84%B1" class="hash-link" aria-label="Direct link to 결과물 생성" title="Direct link to 결과물 생성">​</a></h3>
<p>OpenAPI 3.0.1 specification 으로 문서를 만드려면 다음과 같은 명령어로 yaml 혹은 json 파일을 만든다.</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">./gradlew openapi3</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>build 디렉토리가 없으면 오류가 나기 때문에 빌드 돌린 후 진행하면 된다.</p>
<p>/build/api-spec/에 yaml 파일이 생긴것을 확인할 수 있다.</p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/2024-03-3011.10.03-f44454742f8a5bf3a2b021a707d18659.png" width="2360" height="1092" class="img_ev3q"></p>
<p>IntelliJ 사용시 OAS 스팩을 UI로 바로 확인할 수도 있다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="msa에서-api-문서-통합해-swagger-적용하기">MSA에서 api 문서 통합해 Swagger 적용하기<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#msa%EC%97%90%EC%84%9C-api-%EB%AC%B8%EC%84%9C-%ED%86%B5%ED%95%A9%ED%95%B4-swagger-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to MSA에서 api 문서 통합해 Swagger 적용하기" title="Direct link to MSA에서 api 문서 통합해 Swagger 적용하기">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="흩어져-있는-yaml파일-통합">흩어져 있는 yaml파일 통합<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#%ED%9D%A9%EC%96%B4%EC%A0%B8-%EC%9E%88%EB%8A%94-yaml%ED%8C%8C%EC%9D%BC-%ED%86%B5%ED%95%A9" class="hash-link" aria-label="Direct link to 흩어져 있는 yaml파일 통합" title="Direct link to 흩어져 있는 yaml파일 통합">​</a></h3>
<div class="language-gradle codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-gradle codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">task </span><span class="token function" style="color:hsl(221, 87%, 60%)">copyOpenApiSpecsToDocsDir</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">type</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> Copy</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	dependsOn </span><span class="token string" style="color:hsl(119, 34%, 47%)">':api:member:openapi3'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	dependsOn </span><span class="token string" style="color:hsl(119, 34%, 47%)">':api:store:makeOpenapi'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	dependsOn </span><span class="token string" style="color:hsl(119, 34%, 47%)">':api:event:openapi3'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token comment" style="color:hsl(230, 4%, 64%)">// member</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	from </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token interpolation-string interpolation expression string" style="color:hsl(119, 34%, 47%)">':api:member'</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">buildDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/api-spec/member-openapi.yaml"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	into </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">rootDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/docs/openapi"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token comment" style="color:hsl(230, 4%, 64%)">// product</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	from </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token interpolation-string interpolation expression string" style="color:hsl(119, 34%, 47%)">':api:store'</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">buildDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/api-spec/store-openapi.yaml"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	into </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">rootDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/docs/openapi"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	</span><span class="token comment" style="color:hsl(230, 4%, 64%)">//event</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	from </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token interpolation-string interpolation expression string" style="color:hsl(119, 34%, 47%)">':api:event'</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">buildDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/api-spec/event-openapi.yaml"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">	into </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression keyword" style="color:hsl(301, 63%, 40%)">project</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">rootDir</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/docs/openapi"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>위 스크립트를 작성해 각 api 모듈의 빌드 디렉토리에서, 루트의 /docs로 결과물을 복사하는 task를 생성했다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">├── docs</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; ├── Dockerfile</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; ├── index.html</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; ├── openapi</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── event-openapi.yaml</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── member-openapi.yaml</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; └── store-openapi.yaml</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">│&nbsp;&nbsp; └── urls.json</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>copyOpenApiSpecsToDocsDir</code>를 실행하면, /docs/openapi로 파일들이 모이게 된다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="swagger-적용하기">Swagger 적용하기<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#swagger-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to Swagger 적용하기" title="Direct link to Swagger 적용하기">​</a></h3>
<p>spring에서 정적 리소스를 호스팅하고 이 주소로 docker swagger 이미지를 사용해 띄우는 방법도 있지만, 서버가 가동중이 아닐때도 확인 할 수 있게 세팅하고 싶었다.</p>
<p>간단하게 Swagger의 <code>index.html</code> 만 가져와 standalone 모드로 세팅했다.</p>
<p>먼저 전체 소스코드이다. <a href="https://swagger.io/docs/open-source-tools/swagger-ui/usage/installation/" target="_blank" rel="noopener noreferrer">Swagger UI Installation</a> 참고해서 base html을 가져왔고, 조금 수정했다.</p>
<p><strong>📄 index.html 전체 소스코드</strong></p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token doctype punctuation" style="color:hsl(119, 34%, 47%)">&lt;!</span><span class="token doctype doctype-tag" style="color:hsl(230, 8%, 24%)">DOCTYPE</span><span class="token doctype" style="color:hsl(230, 8%, 24%)"> </span><span class="token doctype name" style="color:hsl(230, 8%, 24%)">html</span><span class="token doctype punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">html</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">lang</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">en</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">head</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">meta</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">charset</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">utf-8</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">meta</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">viewport</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">content</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">width=device-width, initial-scale=1</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">meta</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">name</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">description</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">content</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">SwaggerUI</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">title</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain">백투더퓨처 API Docs</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">title</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">link</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">rel</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">stylesheet</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">href</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">https://unpkg.com/swagger-ui-dist@5.11.8/swagger-ui.css</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">head</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">body</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">div</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">id</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">swagger-ui</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">div</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">src</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">https://unpkg.com/swagger-ui-dist@5.11.8/swagger-ui-bundle.js</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">crossorigin</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token script"></span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">src</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">https://unpkg.com/swagger-ui-dist@5.11.8/swagger-ui-standalone-preset.js</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">      </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">crossorigin</span><span class="token tag" style="color:hsl(5, 74%, 59%)"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token tag" style="color:hsl(5, 74%, 59%)">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token script"></span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag" style="color:hsl(5, 74%, 59%)"> </span><span class="token tag attr-name" style="color:hsl(35, 99%, 36%)">src</span><span class="token tag attr-value punctuation attr-equals" style="color:hsl(119, 34%, 47%)">=</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag attr-value" style="color:hsl(119, 34%, 47%)">https://unpkg.com/axios/dist/axios.min.js</span><span class="token tag attr-value punctuation" style="color:hsl(119, 34%, 47%)">"</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token script"></span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">      window</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript function-variable function" style="color:hsl(221, 87%, 60%)">onload</span><span class="token script language-javascript"> </span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token script language-javascript"> </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token script language-javascript"> </span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">=&gt;</span><span class="token script language-javascript"> </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">        axios</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript function" style="color:hsl(221, 87%, 60%)">get</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token script language-javascript string" style="color:hsl(119, 34%, 47%)">"urls.json"</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript function" style="color:hsl(221, 87%, 60%)">then</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token script language-javascript parameter">res</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token script language-javascript"> </span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">=&gt;</span><span class="token script language-javascript"> </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">          </span><span class="token script language-javascript keyword" style="color:hsl(301, 63%, 40%)">const</span><span class="token script language-javascript"> urls </span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token script language-javascript"> res</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript">data</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">          window</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript">ui </span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token script language-javascript"> </span><span class="token script language-javascript function" style="color:hsl(221, 87%, 60%)">SwaggerUIBundle</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">            </span><span class="token script language-javascript literal-property property" style="color:hsl(5, 74%, 59%)">urls</span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token script language-javascript"> urls</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">            </span><span class="token script language-javascript literal-property property" style="color:hsl(5, 74%, 59%)">dom_id</span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token script language-javascript"> </span><span class="token script language-javascript string" style="color:hsl(119, 34%, 47%)">"#swagger-ui"</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">            </span><span class="token script language-javascript literal-property property" style="color:hsl(5, 74%, 59%)">presets</span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token script language-javascript"> </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token script language-javascript">SwaggerUIBundle</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript">presets</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token script language-javascript">apis</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"> SwaggerUIStandalonePreset</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">]</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">            </span><span class="token script language-javascript literal-property property" style="color:hsl(5, 74%, 59%)">layout</span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token script language-javascript"> </span><span class="token script language-javascript string" style="color:hsl(119, 34%, 47%)">"StandaloneLayout"</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">            </span><span class="token script language-javascript literal-property property" style="color:hsl(5, 74%, 59%)">queryConfigEnabled</span><span class="token script language-javascript operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token script language-javascript"> </span><span class="token script language-javascript boolean" style="color:hsl(35, 99%, 36%)">true</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">          </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">        </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">      </span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token script language-javascript punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token script language-javascript"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token script language-javascript">    </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">script</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">body</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&lt;/</span><span class="token tag" style="color:hsl(5, 74%, 59%)">html</span><span class="token tag punctuation" style="color:hsl(119, 34%, 47%)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>바꾼 부분은 다음과 같다.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">axios</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">get</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"urls.json"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">then</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token parameter">res</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">const</span><span class="token plain"> urls </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> res</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">data</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    window</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">ui </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">SwaggerUIBundle</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token literal-property property" style="color:hsl(5, 74%, 59%)">urls</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> urls</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// 생략</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>여러 yaml 파일들을 통합하기 위해서 json파일로 목록을 작성해 index.html에서 불러올 수 있도록 했다. <code>url.json</code>은 아래처럼 생겼다.</p>
<p><strong>📄 url.json</strong></p>
<div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token punctuation" style="color:hsl(119, 34%, 47%)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"url"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"./openapi/member-openapi.yaml"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"name"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"member-api"</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"url"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"./openapi/store-openapi.yaml"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"name"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"store-api"</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"url"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"./openapi/event-openapi.yaml"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">,</span><span class="token plain"> </span><span class="token property" style="color:hsl(5, 74%, 59%)">"name"</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"event-api"</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>url과 ui상에서 보여질 name을 설정한다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="swagger-결과물을-docker-이미지로-만들기">Swagger 결과물을 Docker 이미지로 만들기<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#swagger-%EA%B2%B0%EA%B3%BC%EB%AC%BC%EC%9D%84-docker-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0" class="hash-link" aria-label="Direct link to Swagger 결과물을 Docker 이미지로 만들기" title="Direct link to Swagger 결과물을 Docker 이미지로 만들기">​</a></h3>
<p>단순하게 index.html만 띄우면 되어서, nginx이미지를 사용했다. 아래는 Dockerfile 내용이다.</p>
<div class="language-Dockerfile language-dockerfile codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dockerfile codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token instruction keyword" style="color:hsl(301, 63%, 40%)">FROM</span><span class="token instruction"> nginx:alpine</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token instruction keyword" style="color:hsl(301, 63%, 40%)">COPY</span><span class="token instruction"> . /usr/share/nginx/html/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이렇게 해서 이미지를 빌드하고 아래처럼 (docker compose 일부) 설정하면 내가 정한 포트로 접근했을때, Swagger UI를 확인할 수 있다.</p>
<div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token key atrule" style="color:hsl(35, 99%, 36%)">swagger-ui</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token key atrule" style="color:hsl(35, 99%, 36%)">image</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"> bagtothefuture</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">-</span><span class="token plain">swagger</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain">latest </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># swagger 이미지</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">  </span><span class="token key atrule" style="color:hsl(35, 99%, 36%)">ports</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">-</span><span class="token plain"> </span><span class="token string" style="color:hsl(119, 34%, 47%)">"8000:80"</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)"># 80포트를 host의 8000로 오픈</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="jwt-토큰-적용하기">JWT 토큰 적용하기<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#jwt-%ED%86%A0%ED%81%B0-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to JWT 토큰 적용하기" title="Direct link to JWT 토큰 적용하기">​</a></h2>
<p><code>requestHedaer()</code>로 작성하면 헤더 입력칸이 생기지만, Try it으로 테스트시 실제로 보내지지 않는다. 거의 모든 API가 JWT 토큰을 사용하는데, 이걸 적용하지 못한다면 Swagger를 적용하는 큰 이유가 하나 사라진다..</p>
<p>epages에서 뒤져보았는데 아직 찾지 못했다 흠..</p>
<p>그러던 참에 <a href="https://velog.io/@hwsa1004/Spring-restdocs-swagger-%EA%B0%99%EC%9D%B4-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0" target="_blank" rel="noopener noreferrer">hwsa1004님의 블로그 글</a>을 발견해 적용해 보았다.</p>
<div class="language-gradle codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-gradle codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">task makeOpenapi </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    dependsOn </span><span class="token string" style="color:hsl(119, 34%, 47%)">'openapi3'</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    doFirst </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">def</span><span class="token plain"> swaggerUIFile </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> </span><span class="token function" style="color:hsl(221, 87%, 60%)">file</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">${</span><span class="token interpolation-string interpolation expression">openapi3</span><span class="token interpolation-string interpolation expression punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token interpolation-string interpolation expression">outputDirectory</span><span class="token interpolation-string interpolation interpolation-punctuation punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">/store-openapi.yaml"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">def</span><span class="token plain"> securitySchemesContent </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain">  </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"  securitySchemes:\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain">  \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                                      </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"    bearerAuth:\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain">  \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                                      </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"      type: http\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain">  \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                                      </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"      scheme: bearer\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain">  \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                                      </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"      bearerFormat: JWT\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"> \</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                                      </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"security:\n"</span><span class="token plain"> </span><span class="token operator" style="color:hsl(221, 87%, 60%)">+</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">                </span><span class="token interpolation-string string" style="color:hsl(119, 34%, 47%)">"  - bearerAuth: []"</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        swaggerUIFile</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token plain">append securitySchemesContent</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>직접 이부분을 문서 마지막에 추가해주는 것이다.</p>
<p>블로그와 다른 점은, <a href="https://swagger.io/docs/specification/authentication/bearer-authentication/" target="_blank" rel="noopener noreferrer">openapi3 docs</a>를 참고해, bearer 타입으로 넣은 것이다.</p>
<p>이렇게 적용하면 "Bearer "을 포함하지 않고 토큰만 입력해도 된다.</p>
<p><img decoding="async" loading="lazy" src="https://github.com/backtothefuture-team/backtothefuture-backend/assets/67352902/4cd94907-c846-4e9a-a56f-e342f934ba3a" alt="alt text" class="img_ev3q"></p>
<p>토큰을 입력하고, Authorize 버튼을 누르면 이후에 api 테스트에서 header에 토큰을 입력하지 않아도 보내지게 된다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="마무리">마무리<a href="https://yuseon-lim.github.io/blog/2024/03/30/springrestdocs-openapi3#%EB%A7%88%EB%AC%B4%EB%A6%AC" class="hash-link" aria-label="Direct link to 마무리" title="Direct link to 마무리">​</a></h2>
<p>프로젝트를 진행하며 Spring REST Docs + OAS를 적용해보았고, 장점이 너무나 많다고 생각되어 글을 작성하게 되었다. 하면서 공유할 팁이 더 생긴다면 내용을 추가 할 것이다.</p>
<blockquote>
<p>한 번 써보세요!! 장점이 많습니다 :)</p>
</blockquote>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[[TroubleShooting] express가 응답을 보내지 않았다. 왜..?]]></title>
            <link>https://yuseon-lim.github.io/blog/2024/02/04/troubleshooting-express-no-response</link>
            <guid>https://yuseon-lim.github.io/blog/2024/02/04/troubleshooting-express-no-response</guid>
            <pubDate>Sun, 04 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-상황">문제 상황<a href="https://yuseon-lim.github.io/blog/2024/02/04/troubleshooting-express-no-response#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9" class="hash-link" aria-label="Direct link to 문제 상황" title="Direct link to 문제 상황">​</a></h2>
<p>문제 상황이 무엇인지 설명하기 전에, 우리 서비스는 파일을 <code>등록</code> 하는 기능이 있고, 똑같은 파일을 중복으로 등록할 수 없다. 중복 등록을 시도할 경우엔 메세지가 뜨며 등록이 안된다.</p>
<p>그런데 사용자로부터 이런 연락을 받았다.</p>
<blockquote>
<p>파일을 업로드 하고, <code>등록</code> 버튼을 눌렀는데 <strong>등록에 실패</strong> 했다는 메시지가 떴습니다.<br>
그래서 다시 등록을 시도했는데, <strong>중복 등록</strong> 이라고 하며 등록이 되지 않았습니다. <br>
확인해보니 처음에 등록한 리포트가 잘 등록이 되어 있네요?</p>
</blockquote>
<p>그러니까, 실패했다는 메세지가 떴는데 실제론 성공했다는 거다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="증상-파악">증상 파악<a href="https://yuseon-lim.github.io/blog/2024/02/04/troubleshooting-express-no-response#%EC%A6%9D%EC%83%81-%ED%8C%8C%EC%95%85" class="hash-link" aria-label="Direct link to 증상 파악" title="Direct link to 증상 파악">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/diagram1-a15ada59da32d02e605b9bbf0305a1fa.png" width="1469" height="287" class="img_ev3q"></p>
<p>등록 기능 프로세스는 이렇다. express에서 요청을 전달하고, spring에서 등록 과정을 수행하고, 그것을 다시 express에 넘기고, express는 클라이언트에 완료를 전달한다.</p>
<p>로그를 살펴보니, <strong>express가 client로 등록 완료 전달</strong> 하는 부분 외에는 모두 success, 200으로 에러 없이 잘 수행되었다.</p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/diagram2-e6f4ff2dbd839a5d213a07cdb152183e.png" width="1469" height="287" class="img_ev3q"></p>
<p><strong>express가 client로 등록 완료 전달</strong> 하는 부분은 ? 로 남았다. 이런 로그를 발견했기 때문이다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">[시간] "POST /api/*** HTTP/1.1" - - "출처" "클라이언트 정보" - - ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>이 로그는 express의 <a href="https://expressjs.com/en/resources/middleware/morgan.html" target="_blank" rel="noopener noreferrer">morgan</a> 미들웨어가 남긴 로그이다. 원래라면 아래처럼 응답시간, 응답크기, 걸린시간이 표시 되어야 한다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">[시간] "POST /api/*** HTTP/1.1" 200 49 "출처" "클라이언트 정보" - 317.922 ms</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>뭔가 응답이 정상적으로 처리되지 않은 듯 했다.</p>
<p>그러나 미스테리인 점은 .. express가 <code>await</code> 으로 spring의 응답을 기다리고, 그 뒤에 성공했을땐 로그를 남기게 되어 있는데, 그 로그는 남았다는 것이다.</p>
<p>express에 에러는 없었고, spring에도 에러는 없었는데, 클라이언트에 응답 전송만 정상적으로 되지 않았다.</p>
<p>찾아보니, 위 -- 로 처리된 로그는 express가 응답 자체를 하지 않았을 때 일어나는 일이라고 한다.</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/39728057/no-request-status-in-node-js-morgan-logging" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/39728057/no-request-status-in-node-js-morgan-logging</a> &gt; <a href="https://github.com/expressjs/morgan/issues/121" target="_blank" rel="noopener noreferrer">https://github.com/expressjs/morgan/issues/121</a></p>
</blockquote>
<p>위 링크에서 추정한 원인은 다음과 같다.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>아마도..</div><div class="admonitionContent_BuS1"><p>response를 보내기 전에 TCP 연결이 끊어진 듯!</p></div></div>
<p>로그 시간을 파악해보니 클라이언트 요청 ~ spring의 응답 까지는 1분 5초 내외로 소요되었다.</p>
<p>그렇다면 어디서 TCP 연결을 해제했을까?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="원인-파악">원인 파악<a href="https://yuseon-lim.github.io/blog/2024/02/04/troubleshooting-express-no-response#%EC%9B%90%EC%9D%B8-%ED%8C%8C%EC%95%85" class="hash-link" aria-label="Direct link to 원인 파악" title="Direct link to 원인 파악">​</a></h2>
<p>내가 의심한 것들은 다음과 같다.</p>
<ul>
<li>axios timeout</li>
<li>node.js timeout</li>
<li>OS의 TCP timeout</li>
<li>L4 스위치 timeout</li>
<li>Nginx timeout</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="axios-timeout">axios timeout<a href="https://yuseon-lim.github.io/blog/2024/02/04/troubleshooting-express-no-response#axios-timeout" class="hash-link" aria-label="Direct link to axios timeout" title="Direct link to axios timeout">​</a></h3>
<p>따로 설정한 것이 없다. <a href="https://github.com/axios/axios/blob/main/README.md#request-config" target="_blank" rel="noopener noreferrer">default는 no timeout</a> 이다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="nodejs-timeout">node.js timeout<a href="https://yuseon-lim.github.io/blog/2024/02/04/troubleshooting-express-no-response#nodejs-timeout" class="hash-link" aria-label="Direct link to node.js timeout" title="Direct link to node.js timeout">​</a></h3>
<p>노드13 버전 이후로는 no timeout이다.</p>
<p>노드8 버전을 쓰는 우리 프로젝트는 120s가 기본으로 설정 되어 있다. (처음알았다 ..)</p>
<blockquote>
<p><a href="https://nodejs.org/api/http.html#servertimeout" target="_blank" rel="noopener noreferrer">https://nodejs.org/api/http.html#servertimeout</a></p>
</blockquote>
<p>그러나 2분 보다 오래 걸리진 않았으므로 이것도 아니다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="os의-tcp-timeout">OS의 TCP timeout<a href="https://yuseon-lim.github.io/blog/2024/02/04/troubleshooting-express-no-response#os%EC%9D%98-tcp-timeout" class="hash-link" aria-label="Direct link to OS의 TCP timeout" title="Direct link to OS의 TCP timeout">​</a></h3>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">cat /proc/sys/net/ipv4/tcp_keepalive_time</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<ul>
<li>tcp_keepalive : tcp 연결이 되고 나서 얼마나 그 연결을 지속하는지</li>
</ul>
<p>7200(2시간) 으로 널널했다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="l4-스위치">L4 스위치<a href="https://yuseon-lim.github.io/blog/2024/02/04/troubleshooting-express-no-response#l4-%EC%8A%A4%EC%9C%84%EC%B9%98" class="hash-link" aria-label="Direct link to L4 스위치" title="Direct link to L4 스위치">​</a></h3>
<p>L4 에서도 뭔가 타임아웃이 걸려있는것은 아닐까..? 하고 해당 사항을 인프라팀에 문의했는데</p>
<p>아니다. (<del>의심해서 죄송합니다...</del>)</p>
<p>전에도 L4 설정 문제때문에 안된 기능이 있어서, 생각났었는데 .. 어쨌든 이게 문제는 아니였다.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="nginx-timeout">Nginx timeout<a href="https://yuseon-lim.github.io/blog/2024/02/04/troubleshooting-express-no-response#nginx-timeout" class="hash-link" aria-label="Direct link to Nginx timeout" title="Direct link to Nginx timeout">​</a></h3>
<div class="language-nginx codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockTitle_Ktv7">/etc/nginx/nginx.conf</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-nginx codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">proxy_connection_timeout</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">proxy_send_timeout</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">proxy_read_timeout</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">send_timeout</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>여기였다 !!</p>
<p>nginx로 리버스 프록시 설정이 되어 있는데, <a href="https://nginx.org/en/docs/http/ngx_http_proxy_module.html" target="_blank" rel="noopener noreferrer">nginx 공식문서</a>를 보면 위 설정들의 기본 timeout이 60s로 잡혀있다.</p>
<p>이 사실을 알고 난 뒤 nginx 에러 로그를 보니 (로그 경로는 nginx.conf 에 있다.)</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockTitle_Ktv7">error.log</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">[error] upstream timed out (110: Connection timed out) while reading response header from upstream .. 생략</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>connection timeout 에러 로그가 찍혔다.</p>
<p>spring이 express로 응답을 보내, express가 client에 응답하기 전에 client와 express간의 연결이 끊어져 client가 응답을 받지 못한 것이다.</p>
<p>항상 도커가 수집한 express 로그만 들여다봤지, nginx의 로그를 봐야한다는 사실을 인지하지 못했다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="해결">해결<a href="https://yuseon-lim.github.io/blog/2024/02/04/troubleshooting-express-no-response#%ED%95%B4%EA%B2%B0" class="hash-link" aria-label="Direct link to 해결" title="Direct link to 해결">​</a></h2>
<p>해결 방법으로는 이런 것들이 있겠다.</p>
<ul>
<li>timeout 늘리기</li>
<li>upstream인 spring 서버의 처리 성능 향상하기 (best)</li>
</ul>
<p>그리고 nginx 로그는 도커 컨테이너 안에 있어서, 컨테이너가 내려가면 로그 파일이 날아가 볼 수 없다.
도커 컨테이너에서 쌓은 로그는 volume으로 연결해 host에도 쌓게 해놨다. nginx 로그도 표준 출력으로 내보내 (/dev/stdout 으로 심볼릭 링크 걸기) 도커가 로그를 수집하게 하거나 nginx 로그를 volume으로 설정해 보관 할 필요가 있다.</p>
<p>일단 timeout을 늘려서 급한 불을 끄고, spring 서버의 처리 성능을 높일 방법을 생각 해 볼 것이다.</p>
<p>적고보니 별일 아닌 듯 하지만,, 의미 있었던 과정이였다.</p>
<p>이 이슈로 인해 우리 서비스의 어떤 부분에 timeout이 얼만큼 걸려있는지 확인 할 수 있었고, 로그도 좀 더 보충할 수 있었다. 다음에 이러한 일이 발생하면 이 경험으로 인해 원인 파악을 조금은 빨리 할 수 있을까 기대해보며 글을 마친다.</p>]]></content:encoded>
            <category>troubleshooting</category>
            <category>express</category>
            <category>nginx</category>
        </item>
        <item>
            <title><![CDATA[오픈소스 첫 기여 ✨]]></title>
            <link>https://yuseon-lim.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose</link>
            <guid>https://yuseon-lim.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose</guid>
            <pubDate>Mon, 29 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[에러가 발생하지 않았는데, 클라이언트는 서버의 응답을 받지 못했다. 이유를 찾아보자 !]]></description>
            <content:encoded><![CDATA[<p>비록 공식문서의 오류를 고치는 일이였지만,</p>
<p>처음으로 오픈소스에 기여했고 무려 Docker 문서 이다!!</p>
<p>머지 되었을때는 정말 뿌듯했고 이슈를 생성하고 PR을 날리는 과정도 재밌었다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-발견-이슈-생성">문제 발견, 이슈 생성<a href="https://yuseon-lim.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose#%EB%AC%B8%EC%A0%9C-%EB%B0%9C%EA%B2%AC-%EC%9D%B4%EC%8A%88-%EC%83%9D%EC%84%B1" class="hash-link" aria-label="Direct link to 문제 발견, 이슈 생성" title="Direct link to 문제 발견, 이슈 생성">​</a></h2>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/20240205204509-f2e74099202853e823cb78732f5ca801.png" width="1280" height="1272" class="img_ev3q"></p>
<p>문서에 틀린 부분을 발견하고, 이슈를 생성했다.</p>
<p>수정이 필요한게 맞다면 내가 작업해도 되는지 물어봤다.</p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/20240205204536-7317bcba405665632247d11e27f21bee.png" width="1280" height="325" class="img_ev3q"></p>
<p>assgin 해주셨고, 문서 위치가 바뀌었으니 compose-spec 레포지토리에서 PR을 해달라는 친절한 가이드까지 주셨다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="pull-request-생성하기">Pull Request 생성하기<a href="https://yuseon-lim.github.io/blog/2024/01/29/first-opensearch-contribute-docker-compose#pull-request-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0" class="hash-link" aria-label="Direct link to Pull Request 생성하기" title="Direct link to Pull Request 생성하기">​</a></h2>
<p>먼저 compose-spec을 fork하고, 소스코드 수정 후 commit 했다.</p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/20240205204610-5413e3c821b694c110606f39d3151d90.png" width="1280" height="555" class="img_ev3q"></p>
<p>다시 upstream으로&nbsp;와서 pull request를 생성했다.</p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/20240205204624-fdecc28aa37fba29ed24fe8cd9f58c4d.png" width="1280" height="977" class="img_ev3q"></p>
<p>이건 내가 CONTRIBUTING.md를 꼼꼼히 보지 않아 생긴 일이다. ㅜㅜ</p>
<p>그냥 커밋할때 계정 정보를 확인해달라는 말인 줄 알았는데,</p>
<p>커밋 메세지에 sign-off를 포함하지 않으면 DCO check에 실패 하면서 오류가 난다.</p>
<p>친절히 알려주셔서 커밋 메세지 수정 후 강제 푸시했고,</p>
<p>이후 빌드에 한 번 실패해 한가지 수정을 더 하고 머지되었다.</p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/20240205204639-c07af163ab852efa41e6921ac7434576.png" width="1600" height="348" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/20240205204646-5fb251394303ed66639c4a7d58982e93.png" width="910" height="492" class="img_ev3q"></p>
<p>이렇게&nbsp;오픈소스 기여에 작지만 위대한 첫 걸음을 내딛었다.</p>
<p>앞으로도 문서 뿐만 아니라 코드 레벨까지 .. 더 많은 오픈소스에 기여할 수 있게 되면 좋겠다.</p>]]></content:encoded>
            <category>docker</category>
            <category>opensource-contributions</category>
        </item>
        <item>
            <title><![CDATA[[Java] 에러 메시지, Stacktrace가 생략되는 문제]]></title>
            <link>https://yuseon-lim.github.io/blog/2024/01/02/java-no-stacktrace</link>
            <guid>https://yuseon-lim.github.io/blog/2024/01/02/java-no-stacktrace</guid>
            <pubDate>Tue, 02 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[NullPointerException의 에러 메시지가 빈 채로 출력된다]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-상황">문제 상황<a href="https://yuseon-lim.github.io/blog/2024/01/02/java-no-stacktrace#%EB%AC%B8%EC%A0%9C-%EC%83%81%ED%99%A9" class="hash-link" aria-label="Direct link to 문제 상황" title="Direct link to 문제 상황">​</a></h2>
<p>테스트 스크립트를 배포시에 실행하게 되어 있는데, 해당 스클립트는 같은 api를 여러 case로 몇십번 호출한다.</p>
<p>최초 실행시에는 성공하고,</p>
<p>두번째 이후부턴 실패한다.</p>
<p>지금까지는 서비스 실행시 한번만 실행했어서 발견을 못 한 문제였다.</p>
<p>에러가 발생한 지점은 여기였다.</p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">Exception</span><span class="token plain"> e</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token class-name" style="color:hsl(35, 99%, 36%)">String</span><span class="token plain"> msg </span><span class="token operator" style="color:hsl(221, 87%, 60%)">=</span><span class="token plain"> e</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">getMessage</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">;</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// errMsg: null</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">if</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token plain">msg</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token function" style="color:hsl(221, 87%, 60%)">equalsIgnoreCase</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">(</span><span class="token string" style="color:hsl(119, 34%, 47%)">"XXX"</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">{</span><span class="token plain"> </span><span class="token comment" style="color:hsl(230, 4%, 64%)">// NullPointerException 발생!</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">        </span><span class="token comment" style="color:hsl(230, 4%, 64%)">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">    </span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain"></span><span class="token punctuation" style="color:hsl(119, 34%, 47%)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>try ~ catch 문에서 에러 메세지를 가져와 어떤 에러 메시지인지 판단하려고 할 때, <code>e.getMessage()</code> 결과가&nbsp;<strong>null</strong>&nbsp;이 되어 catch 구문에서 다시 에러가 발생하는 것이였다.</p>
<p>로직을 살펴보니 특정 case엔 무조건 try쪽에서 NPE가 발생하고, catch문으로 들어오게 되어있었다.</p>
<p>근데 왜 최초 실행시엔 msg가 null이 아닌가..???!!!</p>
<p>해당 현상을 재현한 뒤에 최초 실행 / 이후 실행에 대한 에러를 출력해 보았다.</p>
<p><strong>최초</strong></p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">class java.lang.NullPointerException: Cannot invoke "Object.toString()" because of "java.util.Map.get(Object) is null</span><br></span><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">// 굉장히 긴 StackTrace</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><strong>두번째~</strong></p>
<div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token keyword" style="color:hsl(301, 63%, 40%)">class</span><span class="token plain"> </span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">java</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name namespace" style="color:hsl(35, 99%, 36%)">lang</span><span class="token class-name namespace punctuation" style="color:hsl(119, 34%, 47%)">.</span><span class="token class-name" style="color:hsl(35, 99%, 36%)">NullPointerException</span><span class="token operator" style="color:hsl(221, 87%, 60%)">:</span><span class="token plain"> </span><span class="token keyword" style="color:hsl(301, 63%, 40%)">null</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>나는 내가 로직 어딘가에 NPE가 발생하는 원인을 놓친줄 알고 며칠을 삽질했는데, 스택오버플로우에서 이 글을 발견했다.</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/2411487/nullpointerexception-in-java-with-no-stacktrace" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/2411487/nullpointerexception-in-java-with-no-stacktrace</a></p>
</blockquote>
<p>관련해서 간략하게&nbsp;조사해 보았다.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="jvm-stacktrace-생략">JVM Stacktrace 생략<a href="https://yuseon-lim.github.io/blog/2024/01/02/java-no-stacktrace#jvm-stacktrace-%EC%83%9D%EB%9E%B5" class="hash-link" aria-label="Direct link to JVM Stacktrace 생략" title="Direct link to JVM Stacktrace 생략">​</a></h2>
<p><a href="https://www.oracle.com/java/technologies/javase/release-notes-introduction.html" target="_blank" rel="noopener noreferrer">JDK5 릴리즈 노트</a>를 보면 Exception이 반복적으로 발생할 때, 컴파일러는 StackTrace를 출력하는것을 멈춘다고 한다.</p>
<p>이것은 JVM의 JIT컴파일러의 C2컴파일러의 기본 최적화 옵션 이라고 한다.</p>
<p><a href="https://github.com/openjdk/jdk/blob/master/src/hotspot/share/opto/graphKit.cpp#L528" target="_blank" rel="noopener noreferrer">OpenJDK의 소스 코드</a>를 보면 다음 다섯가지 Exception에 대해 최적화 옵션이 적용된다.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p><strong>Stacktrace 생략 최적화 옵션 적용되는 Exception</strong></p><ul>
<li>NullPointerException</li>
<li>ArithmeticException</li>
<li>ArrayIndexOutOfBoundsException</li>
<li>ClassCastException</li>
<li>ArrayStoreException</li>
</ul></div></div>
<p><img decoding="async" loading="lazy" src="https://yuseon-lim.github.io/assets/images/20240205210954-daea46cab06af5c5a21bd4ebeeaf3713.png" width="1234" height="1556" class="img_ev3q"></p>
<p>최적화 옵션을 비활성화 하려면 아래 JVM 옵션을&nbsp;추가해 주면 된다.</p>
<div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-background-color:hsl(230, 1%, 98%);--prism-color:hsl(230, 8%, 24%)"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="background-color:hsl(230, 1%, 98%);color:hsl(230, 8%, 24%)"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:hsl(230, 8%, 24%)"><span class="token plain">-XX:-OmitStackTraceInFastThrow</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>하지만 이는 성능 최적화를 위한 옵션으로, 해당 Exception이 반복적으로 일어나지 않게끔 처리 하는것이 올바른 방향 일 것이다.</p>
<p>Exception 처리에 대한 최적화를 하는 이유가 궁금해서 찾아보았다.</p>
<p>Java에서 Exception을 던지는 비용은 꽤 비싸다고 한다. Exception이 발생하면 해당 예외가 어디서 발생했는지 추적하며 정보를 수집하고 Stack Trace를 생성한다. 이를 계산하는데에도 시간이 꽤 걸린.</p>
<p>또, 예외 객체를 새로 생성하고 초기화 하는 과정이 반복되기 때문에 좋지 않다. 그리고 Exception이 발생하면 그것이 어떤 예외인지 적절한 예외 핸들러를 찾아 리턴해줘야 하는데, 예외 핸들러를 찾는 과정 또한 오래 걸린다.</p>
<p>프로젝트를 할 때도, 적절한 예외 상황에 Custom Exception을 던지곤 했는데, 이게 맞는 방법인지 생각해볼 필요가 있는 듯 하다.</p>
<p>그리고 스택 추적이 필요하지 않은 경우라면 override를 통해 trace를 담지 않도록 하는 방법도 좋겠다.</p>]]></content:encoded>
            <category>java</category>
        </item>
    </channel>
</rss>